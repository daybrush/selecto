{"version":3,"file":"selecto.min.js","sources":["../src/utils.ts","../src/consts.ts","../src/index.umd.ts","../src/Selecto.tsx","../src/SelectoManager.tsx"],"sourcesContent":["import type { Hypertext, Point, Rect } from \"./types\";\nimport { IObject, addClass, hasClass, calculateBoundSize, getDist } from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport { getMinMaxs } from \"overlap-area\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0] || e.changedTouches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\nexport function filterDuplicated<T>(arr: T[]): T[] {\n    if (typeof Map === \"undefined\") {\n        return arr.filter((value, index) => {\n            return arr.indexOf(value) === index;\n        });\n    }\n    const map = new Map<T, true>();\n    return arr.filter(value => {\n        if (map.has(value)) {\n            return false;\n        }\n        map.set(value, true);\n        return true;\n    });\n}\nexport function elementFromPoint(clientX: number, clientY: number): HTMLElement | SVGElement | null {\n    return (document.elementFromPoint && document.elementFromPoint(clientX, clientY)) as any || null;\n}\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\nexport function isFastInside(point: number[], points: number[][]) {\n    const { minX, minY, maxX, maxY } = getMinMaxs(points);\n    const [x, y] = point;\n\n    return minX <= x && x <= maxX && minY <= y && y <= maxY;\n}\nexport function getFastOverlapPoints(points1: number[][], points2: number[][]) {\n    const {\n        minX: minX1,\n        minY: minY1,\n        maxX: maxX1,\n        maxY: maxY1,\n    } = getMinMaxs(points1);\n    const {\n        minX: minX2,\n        minY: minY2,\n        maxX: maxX2,\n        maxY: maxY2,\n    } = getMinMaxs(points2);\n\n    if (maxX2 < minX1 || maxX1 < minX2 || maxY2 < minY1 || maxY1 < minY2) {\n        return [];\n    }\n    const width = Math.min(maxX2 - minX1, maxX1 - minX2);\n    const height = Math.min(maxY2 - minY1, maxY1 - minY2);\n\n    return [\n        [0, 0],\n        [width, 0],\n        [width, height],\n        [0, height],\n    ];\n}\nexport function getRect(\n    e: any, ratio: number,\n    boundArea = e.data.boundArea,\n): Rect {\n    let {\n        distX = 0,\n        distY = 0,\n    } = e;\n    const { startX, startY } = e.data;\n\n    if (ratio > 0) {\n        const nextHeight = Math.sqrt((distX * distX + distY * distY) / (1 + ratio * ratio));\n        const nextWidth = ratio * nextHeight;\n\n        distX = (distX >= 0 ? 1 : -1) * nextWidth;\n        distY = (distY >= 0 ? 1 : -1) * nextHeight;\n    }\n    let width = Math.abs(distX);\n    let height = Math.abs(distY);\n\n    const maxWidth = distX < 0 ? startX - boundArea.left : boundArea.right - startX;\n    const maxHeight = distY < 0 ? startY - boundArea.top : boundArea.bottom - startY;\n\n    [width, height] = calculateBoundSize([width, height], [0, 0], [maxWidth, maxHeight], !!ratio);\n    distX = (distX >= 0 ? 1 : -1) * width;\n    distY = (distY >= 0 ? 1 : -1) * height;\n\n    const tx = Math.min(0, distX);\n    const ty = Math.min(0, distY);\n    const left = startX + tx;\n    const top = startY + ty;\n\n    return {\n        left,\n        top,\n        right: left + width,\n        bottom: top + height,\n        width,\n        height,\n    };\n}\n\nexport function getDefaultElementRect(el: HTMLElement | SVGElement): Point {\n    const rect = el.getBoundingClientRect();\n    const { left, top, width, height } = rect;\n\n    return {\n        pos1: [left, top],\n        pos2: [left + width, top],\n        pos3: [left, top + height],\n        pos4: [left + width, top + height],\n    };\n}\n\nexport function passTargets(\n    beforeTargets: Array<HTMLElement | SVGElement>,\n    afterTargets: Array<HTMLElement | SVGElement>,\n    continueSelectWithoutDeselect: boolean,\n) {\n    const {\n        list,\n        prevList,\n        added,\n        removed,\n        maintained,\n    } = diff(beforeTargets, afterTargets);\n\n    return [\n        ...added.map(index => list[index]),\n        ...removed.map(index => prevList[index]),\n        ...continueSelectWithoutDeselect ? maintained.map(([, nextIndex]) => list[nextIndex]) : [],\n    ];\n}\n\nexport function getLineSize(points: number[][]) {\n    let size = 0;\n    const length = points.length;\n\n    for (let i = 1; i < length; ++i) {\n        size = Math.max(getDist(points[i], points[i - 1]), size);\n    }\n\n    return size;\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    pointer-events: none;\n    will-change: transform;\n    z-index: 100;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\nexport const PROPERTIES = [\n    \"boundContainer\",\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"continueSelectWithoutDeselect\",\n    \"toggleContinueSelect\",\n    \"toggleContinueSelectWithoutDeselect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n    \"checkInput\",\n    \"preventDefault\",\n    \"ratio\",\n    \"getElementRect\",\n    \"preventDragFromInside\",\n    \"rootContainer\",\n    \"dragCondition\",\n    \"clickBySelectEnd\",\n    \"checkOverflow\",\n] as const;\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    \"cspNonce\",\n    \"preventClickEventOnDrag\",\n    \"preventClickEventOnDragStart\",\n    \"preventRightClick\",\n    ...PROPERTIES,\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    boundContainer: null,\n    portalContainer: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    toggleContinueSelectWithoutDeselect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n    checkInput: Boolean,\n    preventDefault: Boolean,\n    cspNonce: String,\n    ratio: Number,\n    getElementRect: Function,\n    preventDragFromInside: Boolean,\n    rootContainer: Object,\n    dragCondition: Function,\n    clickBySelectEnd: Boolean,\n    continueSelectWithoutDeselect: Boolean,\n    preventClickEventOnDragStart: Boolean,\n    preventClickEventOnDrag: Boolean,\n    checkOverflow: Boolean,\n};\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"drag\",\n    \"dragEnd\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"clickTarget\",\n    \"getSelectableElements\",\n    \"setSelectedTargets\",\n    \"getElementPoints\",\n    \"getSelectedTargets\",\n    \"findSelectableTargets\",\n    \"triggerDragStart\",\n    \"checkScroll\",\n    \"selectTargetsByPoints\",\n    \"setSelectedTargetsByPoints\",\n] as const;\n","import Selecto, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Selecto as any)[name] = (modules as any)[name];\n}\n\nexport default Selecto;\n","import SelectoManager from \"./SelectoManager\";\n\nclass Selecto extends SelectoManager {\n\n}\nexport default Selecto;\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto, { OnDrag, OnDragStart } from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport {\n    isObject,\n    camelize,\n    IObject,\n    addEvent,\n    removeEvent,\n    isArray,\n    isString,\n    between,\n    splitUnit,\n    isFunction,\n} from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport DragScroll from \"@scena/dragscroll\";\nimport KeyController, { getCombi } from \"keycon\";\nimport {\n    getAreaSize,\n    getOverlapPoints,\n    isInside,\n    fitPoints,\n} from \"overlap-area\";\nimport { getDistElementMatrix, calculateMatrixDist, createMatrix } from \"css-to-mat\";\nimport {\n    createElement,\n    h,\n    getClient,\n    diffValue,\n    getRect,\n    getDefaultElementRect,\n    passTargets,\n    elementFromPoint,\n    filterDuplicated,\n    getLineSize,\n} from \"./utils\";\nimport {\n    SelectoOptions,\n    SelectoProperties,\n    OnDragEvent,\n    SelectoEvents,\n    Rect,\n    BoundContainer,\n    InnerGroup,\n    SelectedTargets,\n    SelectedTargetsWithRect,\n    Point,\n} from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends EventEmitter\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const getter = camelize(`get ${property}`);\n    if (prototype[getter]) {\n        attributes.get = function get() {\n            return this[getter]();\n        };\n    } else {\n        attributes.get = function get() {\n            return this.options[property];\n        };\n    }\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function set(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function set(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends EventEmitter<SelectoEvents> {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window | Element[];\n    private container!: HTMLElement;\n    private gesto!: Gesto;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private dragScroll: DragScroll = new DragScroll();\n    private keycon!: KeyController;\n    private _keydownContinueSelect: boolean;\n    private _keydownContinueSelectWithoutDeselection: boolean;\n    /**\n     *\n     */\n    constructor(options: Partial<SelectoOptions> = {}) {\n        super();\n        this.target = options.portalContainer;\n        let container = options.container;\n        this.options = {\n            portalContainer: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            clickBySelectEnd: false,\n            hitRate: 100,\n            continueSelect: false,\n            continueSelectWithoutDeselect: false,\n            toggleContinueSelect: null,\n            toggleContinueSelectWithoutDeselect: null,\n            keyContainer: null,\n            scrollOptions: undefined,\n            checkInput: false,\n            preventDefault: false,\n            boundContainer: false,\n            preventDragFromInside: true,\n            dragCondition: null,\n            rootContainer: null,\n            checkOverflow: false,\n            getElementRect: getDefaultElementRect,\n            cspNonce: \"\",\n            ratio: 0,\n            ...options,\n        };\n        const portalContainer = this.options.portalContainer;\n\n        if (portalContainer) {\n            container = portalContainer.parentElement;\n        }\n        this.container = container || document.body;\n        this.initElement();\n        this.initDragScroll();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     * selectByClick, continueSelect, and continueSelectWithoutDeselect are not applied.\n     */\n    public setSelectedTargets(\n        selectedTargets: Array<HTMLElement | SVGElement>\n    ): SelectedTargets {\n        const beforeSelected = this.selectedTargets;\n        const { added, removed, prevList, list } = diff(\n            beforeSelected,\n            selectedTargets\n        );\n        this.selectedTargets = selectedTargets;\n\n        return {\n            added: added.map(index => list[index]),\n            removed: removed.map(index => prevList[index]),\n            beforeSelected,\n            selected: selectedTargets,\n        };\n    }\n    /**\n     * You can set the currently selected targets by points\n     * selectByClick, continueSelect, and continueSelectWithoutDeselect are not applied.\n     */\n    public setSelectedTargetsByPoints(\n        point1: number[],\n        point2: number[],\n    ): SelectedTargetsWithRect {\n        const left = Math.min(point1[0], point2[0]);\n        const top = Math.min(point1[1], point2[1]);\n        const right = Math.max(point1[0], point2[0]);\n        const bottom = Math.max(point1[1], point2[1]);\n        const rect: Rect = {\n            left,\n            top,\n            right,\n            bottom,\n            width: right - left,\n            height: bottom - top,\n        };\n        const data = { ignoreClick: true };\n\n        this.findSelectableTargets(data);\n        const selectedElements = this.hitTest(rect, data);\n        const result = this.setSelectedTargets(selectedElements);\n\n        return {\n            ...result,\n            rect,\n        };\n    }\n    /**\n     * Select target by virtual drag from startPoint to endPoint.\n     * The target of inputEvent is null.\n     */\n    public selectTargetsByPoints(\n        startPoint: number[],\n        endPoint: number[],\n    ) {\n        const mousedown = new MouseEvent(\"mousedown\", {\n            clientX: startPoint[0],\n            clientY: startPoint[1],\n            cancelable: true,\n            bubbles: true,\n        });\n        const mousemove = new MouseEvent(\"mousemove\", {\n            clientX: endPoint[0],\n            clientY: endPoint[1],\n            cancelable: true,\n            bubbles: true,\n        });\n        const mouseup = new MouseEvent(\"mousemove\", {\n            clientX: endPoint[0],\n            clientY: endPoint[1],\n            cancelable: true,\n            bubbles: true,\n        });\n        const gesto = this.gesto;\n        const result = gesto.onDragStart(mousedown);\n\n        if (result !== false) {\n            gesto.onDrag(mousemove);\n            gesto.onDragEnd(mouseup);\n        }\n    }\n    /**\n     * You can get the currently selected targets.\n     */\n    public getSelectedTargets(): Array<HTMLElement | SVGElement> {\n        return this.selectedTargets;\n    }\n    /**\n     * `OnDragStart` is triggered by an external event.\n     * @param - external event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto();\n     *\n     * window.addEventListener(\"mousedown\", e => {\n     *   selecto.triggerDragStart(e);\n     * });\n     */\n    public triggerDragStart(e: MouseEvent | TouchEvent) {\n        this.gesto.triggerDragStart(e);\n        return this;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.gesto.unset();\n        this.injectResult.destroy();\n        removeEvent(document, \"selectstart\", this._onDocumentSelectStart);\n\n        this.keycon = null;\n        this.gesto = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n    public getElementPoints(target: HTMLElement | SVGElement) {\n        const getElementRect = this.getElementRect || getDefaultElementRect;\n        const info = getElementRect(target);\n        const points = [info.pos1, info.pos2, info.pos4, info.pos3];\n\n        if (getElementRect !== getDefaultElementRect) {\n            const rect = target.getBoundingClientRect();\n\n            return fitPoints(points, rect);\n        }\n        return points;\n    }\n    /**\n     * Get all elements set in `selectableTargets`.\n     */\n    public getSelectableElements() {\n        const selectableElements: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach((target) => {\n            if (isFunction(target)) {\n                const result = target();\n\n                if (result) {\n                    selectableElements.push(...[].slice.call(result));\n                }\n            } else if (target instanceof Node) {\n                selectableElements.push(target);\n            } else if (isObject(target)) {\n                selectableElements.push(target.value || target.current);\n            } else {\n                const elements = [].slice.call(\n                    document.querySelectorAll(target)\n                );\n\n                selectableElements.push(...elements);\n            }\n        });\n\n        return selectableElements;\n    }\n    /**\n     * If scroll occurs during dragging, you can manually call this method to check the position again.\n     */\n    public checkScroll() {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        const scrollOptions = this.scrollOptions;\n\n        // If it is a scrolling position, pass drag\n        scrollOptions?.container && this.dragScroll.checkScroll({\n            inputEvent: this.gesto.getCurrentEvent(),\n            ...scrollOptions,\n        });\n    }\n    /**\n     * Find for selectableTargets again during drag event\n     * You can update selectable targets during an event.\n     */\n    public findSelectableTargets(data: any = this.gesto.getEventData()): Array<HTMLElement | SVGElement> {\n        const selectableTargets = this.getSelectableElements();\n        const selectablePoints = selectableTargets.map(\n            (target) => this.getElementPoints(target),\n        );\n        data.selectableTargets = selectableTargets;\n        data.selectablePoints = selectablePoints;\n        if (this.options.checkOverflow) {\n            const parentMap = new Map<Element, Point>();\n\n            data.selectableInners = selectableTargets.map((target, i) => {\n                let parentElement = target.parentElement;\n\n                const parents: Element[] = [];\n\n                while (parentElement && parentElement !== document.body) {\n                    let rect: Point = parentMap.get(parentElement);\n\n                    if (!rect) {\n                        const overflow = getComputedStyle(parentElement).overflow !== \"visible\";\n\n                        if (overflow) {\n                            rect = getDefaultElementRect(parentElement);\n\n                            parents.forEach(prevParentElement => {\n                                parentMap.set(prevParentElement, rect);\n                            })\n                            // TODO: multi parent\n                        }\n                    }\n                    if (rect) {\n                        const points1 = selectablePoints[i];\n                        const points2 = [rect.pos1, rect.pos2, rect.pos4, rect.pos3];\n\n                        const overlapPoints = getOverlapPoints(points1, points2);\n\n                        if (!overlapPoints.length) {\n                            return false;\n                        }\n                        break;\n                    }\n                    parents.push(parentElement);\n                    parentElement = parentElement.parentElement;\n                }\n                return true;\n            });\n        } else {\n            data.selectableInners = selectableTargets.map(() => true);\n        }\n\n        this._refreshGroups(data);\n\n        return selectableTargets;\n    }\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    public clickTarget(\n        e: MouseEvent | TouchEvent,\n        clickedTarget?: Element\n    ): this {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent = {\n            data: {\n                selectFlag: false,\n            },\n            clientX,\n            clientY,\n            inputEvent: e,\n            isClick: true,\n            isTrusted: false,\n            stop: () => {\n                return false;\n            },\n        } as any;\n        if (this._onDragStart(dragEvent, clickedTarget)) {\n            this._onDragEnd(dragEvent);\n        }\n        return this;\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect, toggleContinueSelectWithoutDeselect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect || toggleContinueSelectWithoutDeselect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon\n                .keydown(this._onKeyDown)\n                .keyup(this._onKeyUp)\n                .on(\"blur\", this._onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect, toggleContinueSelectWithoutDeselect } = this.options;\n        if ((!toggleContinueSelect && !toggleContinueSelectWithoutDeselect) || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    // with getter, setter property\n    private setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    private getContinueSelect() {\n        const {\n            continueSelect,\n            toggleContinueSelect,\n        } = this.options;\n\n        if (!toggleContinueSelect || !this._keydownContinueSelect) {\n            return continueSelect;\n        }\n        return !continueSelect;\n    }\n    private getContinueSelectWithoutDeselect() {\n        const {\n            continueSelectWithoutDeselect,\n            toggleContinueSelectWithoutDeselect,\n        } = this.options;\n\n        if (!toggleContinueSelectWithoutDeselect || !this._keydownContinueSelectWithoutDeselection) {\n            return continueSelectWithoutDeselect;\n        }\n        return !continueSelectWithoutDeselect;\n    }\n    private setToggleContinueSelect(\n        toggleContinueSelect: string[][] | string[] | string\n    ) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n    private setToggleContinueSelectWithoutDeselect(\n        toggleContinueSelectWithoutDeselect: string[][] | string[] | string\n    ) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelectWithoutDeselect, toggleContinueSelectWithoutDeselect, () => {\n            options.toggleContinueSelectWithoutDeselect = toggleContinueSelectWithoutDeselect;\n\n            this.setKeyEvent();\n        });\n    }\n    private setPreventDefault(value: boolean) {\n        this.gesto.options.preventDefault = value;\n    }\n    private setCheckInput(value: boolean) {\n        this.gesto.options.checkInput = value;\n    }\n    private initElement() {\n        this.target = createElement(\n            (<div className={CLASS_NAME}></div>) as any,\n            this.target,\n            this.container\n        );\n\n        const target = this.target;\n\n        const {\n            dragContainer,\n            checkInput,\n            preventDefault,\n            preventClickEventOnDragStart,\n            preventClickEventOnDrag,\n            preventClickEventByCondition,\n            preventRightClick = true,\n        } = this.options;\n        this.dragContainer =\n            typeof dragContainer === \"string\"\n                ? [].slice.call(document.querySelectorAll(dragContainer))\n                : dragContainer || (this.target.parentNode as any);\n        this.gesto = new Gesto(this.dragContainer, {\n            checkWindowBlur: true,\n            container: window,\n            checkInput,\n            preventDefault,\n            preventClickEventOnDragStart,\n            preventClickEventOnDrag,\n            preventClickEventByCondition,\n            preventRightClick,\n        }).on({\n            dragStart: this._onDragStart,\n            drag: this._onDrag,\n            dragEnd: this._onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this._onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target, {\n            nonce: this.options.cspNonce,\n        });\n    }\n    private hitTest(\n        selectRect: Rect,\n        data: any,\n        gestoEvent?: any,\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n        const innerGroups: Record<string | number, Record<string | number, InnerGroup>> = data.innerGroups;\n        const innerWidth = data.innerWidth;\n        const innerHeight = data.innerHeight;\n        const clientX = gestoEvent?.clientX;\n        const clientY = gestoEvent?.clientY;\n        const ignoreClick = data.ignoreClick;\n        const rectPoints = [\n            [left, top],\n            [right, top],\n            [right, bottom],\n            [left, bottom],\n        ];\n        const hitRateValue = splitUnit(`${hitRate}`);\n\n        const isHit = (points: number[][], el: Element) => {\n            const inArea = ignoreClick ? false : isInside([clientX, clientY], points);\n\n            if (selectByClick && inArea) {\n                return true;\n            }\n            const overlapPoints = getOverlapPoints(rectPoints, points);\n\n            if (!overlapPoints.length) {\n                return false;\n            }\n            let overlapSize = getAreaSize(overlapPoints);\n\n            // Line\n            let targetSize = 0;\n\n            if (overlapSize === 0 && getAreaSize(points) === 0) {\n                targetSize = getLineSize(points);\n                overlapSize = getLineSize(overlapPoints);\n            } else {\n                targetSize = getAreaSize(points);\n            }\n\n\n            if (hitRateValue.unit === \"px\") {\n                return overlapSize >= hitRateValue.value;\n            } else {\n                const rate = between(\n                    Math.round((overlapSize / targetSize) * 100),\n                    0,\n                    100\n                );\n\n                return rate >= Math.min(100, hitRateValue.value);\n            }\n        };\n        if (!innerGroups) {\n            const selectableTargets: Array<HTMLElement | SVGElement> = data.selectableTargets;\n            const selectablePoints: number[][][] = data.selectablePoints;\n            const selectableInners: boolean[] = data.selectableInners;\n\n            return selectableTargets.filter((_, i) => {\n                if (!selectableInners[i]) {\n                    return false;\n                }\n                return isHit(selectablePoints[i], selectableTargets[i]);\n            });\n        }\n        let selectedTargets: Array<HTMLElement | SVGElement> = [];\n        const minX = Math.floor(left / innerWidth);\n        const maxX = Math.floor(right / innerWidth);\n        const minY = Math.floor(top / innerHeight);\n        const maxY = Math.floor(bottom / innerHeight);\n\n        for (let x = minX; x <= maxX; ++x) {\n            const yGroups = innerGroups[x];\n\n            if (!yGroups) {\n                continue;\n            }\n            for (let y = minY; y <= maxY; ++y) {\n                const group = yGroups[y];\n\n                if (!group) {\n                    continue;\n                }\n                const { points, targets, inners } = group;\n\n                points.forEach((nextPoints, i) => {\n                    if (inners[i] && isHit(nextPoints, targets[i])) {\n                        selectedTargets.push(targets[i]);\n                    }\n                });\n            }\n        }\n        return filterDuplicated(selectedTargets);\n    }\n    private initDragScroll() {\n        this.dragScroll\n            .on(\"scroll\", ({ container, direction }) => {\n                this.emit(\"scroll\", {\n                    container,\n                    direction,\n                });\n            })\n            .on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n                const gesto = this.gesto;\n\n                if (!gesto || !gesto.isFlag()) {\n                    return;\n                }\n\n                const data = this.gesto.getEventData();\n                const boundArea = data.boundArea;\n\n                data.startX -= offsetX;\n                data.startY -= offsetY;\n                data.selectablePoints.forEach((points: number[][]) => {\n                    points.forEach((pos) => {\n                        pos[0] -= offsetX;\n                        pos[1] -= offsetY;\n                    });\n                });\n                this._refreshGroups(data);\n\n                boundArea.left -= offsetX;\n                boundArea.right -= offsetX;\n                boundArea.top -= offsetY;\n                boundArea.bottom -= offsetY;\n\n                this.gesto.scrollBy(\n                    offsetX,\n                    offsetY,\n                    inputEvent.inputEvent,\n                    false\n                );\n                this._checkSelected(this.gesto.getCurrentEvent());\n            });\n    }\n    private _select(\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        e: OnDragEvent,\n        isStart?: boolean\n    ) {\n        const inputEvent = e.inputEvent;\n        const data = e.data;\n        const result = this.setSelectedTargets(selectedTargets);\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.emit(\"selectStart\", {\n                ...result,\n                rect,\n                inputEvent,\n                data: data.data,\n                isTrusted: e.isTrusted,\n            });\n        }\n        if (result.added.length || result.removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.emit(\"select\", {\n                ...result,\n                rect,\n                inputEvent,\n                data: data.data,\n                isTrusted: e.isTrusted,\n            });\n        }\n    }\n    private _selectEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        startPassedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        e: OnDragEvent,\n    ) {\n        const { inputEvent, isDouble, data } = e;\n        const { added, removed, prevList, list } = diff(\n            startSelectedTargets,\n            this.selectedTargets\n        );\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(startPassedTargets, this.selectedTargets);\n        const type = inputEvent && inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"selectEnd\", {\n            startSelected: startSelectedTargets,\n            beforeSelected: startPassedTargets,\n            selected: this.selectedTargets,\n            added: added.map((index) => list[index]),\n            removed: removed.map((index) => prevList[index]),\n            afterAdded: afterAdded.map((index) => afterList[index]),\n            afterRemoved: afterRemoved.map((index) => afterPrevList[index]),\n            isDragStart,\n            isClick: !!e.isClick,\n            isDouble: !!isDouble,\n            rect,\n            inputEvent,\n            data: data.data,\n            isTrusted: e.isTrusted,\n        });\n    }\n    private _onDragStart = (e: OnDragStart, clickedTarget?: Element) => {\n        const { data, clientX, clientY, inputEvent } = e;\n        const {\n            selectFromInside,\n            selectByClick,\n            rootContainer,\n            boundContainer,\n            preventDragFromInside = true,\n            clickBySelectEnd,\n            dragCondition,\n        } = this.options;\n\n        if (dragCondition && !dragCondition(e)) {\n            e.stop();\n            return;\n        }\n        data.data = {};\n        data.innerWidth = window.innerWidth;\n        data.innerHeight = window.innerHeight;\n        this.findSelectableTargets(data);\n        data.startSelectedTargets = this.selectedTargets;\n        data.scaleMatrix = createMatrix();\n        data.containerX = 0;\n        data.containerY = 0;\n\n\n        let boundArea = {\n            left: -Infinity,\n            top: -Infinity,\n            right: Infinity,\n            bottom: Infinity,\n        };\n        if (rootContainer) {\n            const containerRect = this.container.getBoundingClientRect();\n\n            data.containerX = containerRect.left;\n            data.containerY = containerRect.top;\n            data.scaleMatrix = getDistElementMatrix(this.container, rootContainer);\n        }\n\n        if (boundContainer) {\n            const boundInfo: Required<BoundContainer> =\n                isObject(boundContainer) && \"element\" in boundContainer\n                    ? {\n                        left: true,\n                        top: true,\n                        bottom: true,\n                        right: true,\n                        ...boundContainer,\n                    }\n                    : {\n                        element: boundContainer,\n                        left: true,\n                        top: true,\n                        bottom: true,\n                        right: true,\n                    };\n            const boundElement = boundInfo.element;\n            let rectElement: HTMLElement;\n\n            if (boundElement) {\n                if (isString(boundElement)) {\n                    rectElement = document.querySelector(boundElement);\n                } else if (boundElement === true) {\n                    rectElement = this.container;\n                } else {\n                    rectElement = boundElement;\n                }\n                const rect = rectElement.getBoundingClientRect();\n\n                if (boundInfo.left) {\n                    boundArea.left = rect.left;\n                }\n                if (boundInfo.top) {\n                    boundArea.top = rect.top;\n                }\n                if (boundInfo.right) {\n                    boundArea.right = rect.right;\n                }\n                if (boundInfo.bottom) {\n                    boundArea.bottom = rect.bottom;\n                }\n            }\n        }\n\n        data.boundArea = boundArea;\n\n        const hitRect = {\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n            width: 0,\n            height: 0,\n        };\n        let firstPassedTargets: Array<HTMLElement | SVGElement> = [];\n\n        if (!selectFromInside || (selectByClick && !clickBySelectEnd)) {\n            const pointTarget = this._findElement(\n                clickedTarget || elementFromPoint(clientX, clientY),\n                data.selectableTargets,\n            );\n            firstPassedTargets = pointTarget ? [pointTarget] : [];\n        }\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        const isPreventSelect = !selectFromInside && hasInsideTargets;\n\n        // prevent drag from inside when selectByClick is false\n        if (isPreventSelect && !selectByClick) {\n            e.stop();\n            return false;\n        }\n\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts (triggers on mousedown or touchstart), the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result =\n            !(e as any).isClick && isTrusted\n                ? this.emit(\"dragStart\", { ...e, data: data.data })\n                : true;\n\n        if (!result) {\n            e.stop();\n            return false;\n        }\n\n        if (this.continueSelect) {\n            firstPassedTargets = passTargets(\n                this.selectedTargets,\n                firstPassedTargets,\n                this.continueSelectWithoutDeselect,\n            );\n            data.startPassedTargets = this.selectedTargets;\n        } else {\n            data.startPassedTargets = [];\n        }\n        this._select(\n            firstPassedTargets,\n            hitRect,\n            e,\n            true\n        );\n        data.startX = clientX;\n        data.startY = clientY;\n        data.selectFlag = false;\n        data.preventDragFromInside = false;\n\n        if (inputEvent.target) {\n            const offsetPos = calculateMatrixDist(data.scaleMatrix, [\n                clientX - data.containerX,\n                clientY - data.containerY,\n            ]);\n            this.target.style.cssText += `position: ${rootContainer ? \"absolute\" : \"fixed\"};`\n                + `left:0px;top:0px;`\n                + `transform: translate(${offsetPos[0]}px, ${offsetPos[1]}px)`;\n        }\n\n        if (isPreventSelect && selectByClick && !clickBySelectEnd) {\n            inputEvent.preventDefault();\n\n            // prevent drag from inside when selectByClick is true and force call `selectEnd`\n            if (preventDragFromInside) {\n                this._selectEnd(\n                    data.startSelectedTargets,\n                    data.startPassedTargets,\n                    hitRect,\n                    e\n                );\n                data.preventDragFromInside = true;\n            }\n        } else {\n            data.selectFlag = true;\n            if (type === \"touchstart\") {\n                inputEvent.preventDefault();\n            }\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                this.dragScroll.dragStart(e, scrollOptions);\n            }\n            if (clickBySelectEnd) {\n                data.selectFlag = false;\n                e.preventDrag();\n            }\n        }\n        return true;\n    };\n    private _checkSelected(e: any, rect = getRect(e, this.options.ratio)) {\n        const { data } = e;\n        const { top, left, width, height } = rect;\n        const selectFlag = data.selectFlag;\n        const {\n            containerX,\n            containerY,\n            scaleMatrix,\n        } = data;\n        const offsetPos = calculateMatrixDist(scaleMatrix, [\n            left - containerX,\n            top - containerY,\n        ]);\n        const offsetSize = calculateMatrixDist(scaleMatrix, [\n            width,\n            height,\n        ]);\n        let selectedTargets: Array<HTMLElement | SVGElement> = [];\n        if (selectFlag) {\n            this.target.style.cssText +=\n                `display: block;` +\n                `left:0px;top:0px;` +\n                `transform: translate(${offsetPos[0]}px, ${offsetPos[1]}px);` +\n                `width:${offsetSize[0]}px;height:${offsetSize[1]}px;`;\n\n            const passedTargets = this.hitTest(\n                rect,\n                data,\n                e,\n            );\n            selectedTargets = passTargets(\n                data.startPassedTargets,\n                passedTargets,\n                this.continueSelect && this.continueSelectWithoutDeselect,\n            );\n        }\n        /**\n         * When the drag, the drag event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event drag\n         * @param {OnDrag} - Parameters for the drag event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"drag\", e => {\n         *   e.stop();\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result = this.emit(\"drag\", {\n            ...e,\n            data: data.data,\n            isSelect: selectFlag,\n            rect,\n        });\n        if (result === false) {\n            this.target.style.cssText += \"display: none;\";\n            e.stop();\n            return;\n        }\n\n        if (selectFlag) {\n            this._select(selectedTargets, rect, e);\n        }\n    }\n    private _onDrag = (e: OnDrag) => {\n        if (e.data.selectFlag) {\n            const scrollOptions = this.scrollOptions;\n\n            // If it is a scrolling position, pass drag\n            if (scrollOptions?.container && this.dragScroll.drag(e, scrollOptions)) {\n                return;\n            }\n        }\n        this._checkSelected(e);\n    };\n    private _onDragEnd = (e: OnDragEvent) => {\n        const { data, inputEvent } = e;\n        const rect = getRect(e, this.options.ratio);\n        const selectFlag = data.selectFlag;\n\n        /**\n         * When the drag ends (triggers on mouseup or touchend after drag), the dragEnd event is called.\n         * @memberof Selecto\n         * @event dragEnd\n         * @param {OnDragEnd} - Parameters for the dragEnd event\n         */\n        if (inputEvent) {\n            this.emit(\"dragEnd\", {\n                isDouble: !!e.isDouble,\n                isClick: !!e.isClick,\n                isDrag: false,\n                isSelect: selectFlag,\n                ...e,\n                data: data.data,\n                rect,\n            });\n        }\n        this.target.style.cssText += \"display: none;\";\n\n        if (selectFlag) {\n            data.selectFlag = false;\n            this.dragScroll.dragEnd();\n        } else if (this.selectByClick && this.clickBySelectEnd) {\n            // only clickBySelectEnd\n            const pointTarget = this._findElement(\n                elementFromPoint(e.clientX, e.clientY),\n                data.selectableTargets,\n            );\n            this._select(pointTarget ? [pointTarget] : [], rect, e);\n        }\n        if (!data.preventDragFromInside) {\n            this._selectEnd(\n                data.startSelectedTargets,\n                data.startPassedTargets,\n                rect,\n                e\n            );\n        }\n    };\n    private _sameCombiKey(e: any, keys: string | string[] | string[][], isKeyup?: boolean) {\n        if (!keys) {\n            return false;\n        }\n        const combi = getCombi(e.inputEvent, e.key);\n        const nextKeys = [].concat(keys);\n        const toggleKeys = isArray(nextKeys[0]) ? nextKeys : [nextKeys];\n\n        if (isKeyup) {\n            const singleKey = e.key;\n\n            return toggleKeys.some((keys) =>\n                keys.some((key) => key === singleKey)\n            );\n        }\n        return toggleKeys.some((keys) =>\n            keys.every((key) => combi.indexOf(key) > -1)\n        );\n    }\n    private _onKeyDown = (e: any) => {\n        const options = this.options;\n        let isKeyDown = false;\n\n        if (!this._keydownContinueSelect) {\n            const result = this._sameCombiKey(e, options.toggleContinueSelect);\n\n            this._keydownContinueSelect = result;\n            isKeyDown = result;\n        }\n        if (!this._keydownContinueSelectWithoutDeselection) {\n            const result = this._sameCombiKey(e, options.toggleContinueSelectWithoutDeselect);\n\n            this._keydownContinueSelectWithoutDeselection = result;\n            isKeyDown = isKeyDown || result;\n        }\n        if (!isKeyDown) {\n            return;\n        }\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"keydown\", {\n            keydownContinueSelect: this._keydownContinueSelect,\n            keydownContinueSelectWithoutDeselection: this._keydownContinueSelectWithoutDeselection,\n        });\n    };\n    private _onKeyUp = (e: any) => {\n        const options = this.options;\n        let isKeyUp = false;\n\n        if (this._keydownContinueSelect) {\n            const result = this._sameCombiKey(e, options.toggleContinueSelect, true);\n            this._keydownContinueSelect = !result;\n\n            isKeyUp = result;\n        }\n        if (this._keydownContinueSelectWithoutDeselection) {\n            const result = this._sameCombiKey(e, options.toggleContinueSelectWithoutDeselect, true);\n            this._keydownContinueSelectWithoutDeselection = !result;\n\n            isKeyUp = isKeyUp || result;\n        }\n        if (!isKeyUp) {\n            return;\n        }\n\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"keyup\", {\n            keydownContinueSelect: this._keydownContinueSelect,\n            keydownContinueSelectWithoutDeselection: this._keydownContinueSelectWithoutDeselection,\n        });\n    };\n    private _onBlur = () => {\n        if (this._keydownContinueSelect || this._keydownContinueSelectWithoutDeselection) {\n            this._keydownContinueSelect = false;\n            this._keydownContinueSelectWithoutDeselection = false;\n            this.emit(\"keyup\", {\n                keydownContinueSelect: this._keydownContinueSelect,\n                keydownContinueSelectWithoutDeselection: this._keydownContinueSelectWithoutDeselection,\n            });\n        }\n    };\n    private _onDocumentSelectStart = (e: any) => {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        const containers =\n            dragContainer instanceof Element\n                ? [dragContainer]\n                : ([].slice.call(dragContainer) as Element[]);\n        const target = e.target;\n\n        containers.some((container) => {\n            if (container === target || container.contains(target)) {\n                e.preventDefault();\n                return true;\n            }\n        });\n    };\n    private _findElement(clickedTarget: Element | null, selectableTargets: Array<Element>): HTMLElement | SVGElement {\n        let pointTarget = clickedTarget;\n\n        while (pointTarget) {\n            if (selectableTargets.indexOf(pointTarget) > -1) {\n                break;\n            }\n            pointTarget = pointTarget.parentElement;\n        }\n        return pointTarget as any;\n    }\n    private _refreshGroups(data: any) {\n        const innerWidth = data.innerWidth;\n        const innerHeight = data.innerHeight;\n\n        if (!innerWidth || !innerHeight) {\n            data.innerGroups = null;\n        } else {\n            const selectableTargets: Array<HTMLElement | SVGElement> = data.selectableTargets;\n            const selectablePoints: number[][][] = data.selectablePoints;\n            const selectableInners: boolean[] = data.selectableInners;\n            const groups: Record<string | number, Record<string | number, InnerGroup>> = {};\n\n            selectablePoints.forEach((points, i) => {\n                let minX = Infinity;\n                let maxX = -Infinity;\n                let minY = Infinity;\n                let maxY = -Infinity;\n\n                points.forEach(pos => {\n                    const x = Math.floor(pos[0] / innerWidth);\n                    const y = Math.floor(pos[1] / innerHeight);\n\n                    minX = Math.min(x, minX);\n                    maxX = Math.max(x, maxX);\n                    minY = Math.min(y, minY);\n                    maxY = Math.max(y, maxY);\n                });\n\n                for (let x = minX; x <= maxX; ++x) {\n                    for (let y = minY; y <= maxY; ++y) {\n                        groups[x] = groups[x] || {};\n                        groups[x][y] = groups[x][y] || {\n                            points: [],\n                            targets: [],\n                            inners: [],\n                        };\n\n                        const {\n                            targets,\n                            inners,\n                            points: groupPoints,\n                        } = groups[x][y];\n\n                        targets.push(selectableTargets[i]);\n                        groupPoints.push(points);\n                        inners.push(selectableInners[i])\n                    }\n                }\n            });\n\n            data.innerGroups = groups;\n        }\n    }\n}\n\ninterface Selecto extends SelectoProperties { }\n\nexport default Selecto;\n"],"names":["elementFromPoint","clientX","clientY","document","createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","name","setAttribute","elChildren","forEach","child","i","split","elStyle","appendChild","h","attrs","_i","_a","_b","_c","diffValue","prev","cur","func","getRect","e","ratio","boundArea","data","distX","distY","_d","startX","startY","nextHeight","Math","sqrt","width","calculateBoundSize","abs","left","right","top","bottom","height","min","getDefaultElementRect","rect","getBoundingClientRect","pos1","pos2","pos3","pos4","passTargets","beforeTargets","afterTargets","continueSelectWithoutDeselect","diff","list","prevList","added","removed","maintained","map","index","nextIndex","getLineSize","points","size","length","max","getDist","injector","CLASS_NAME","PROPERTIES","OPTIONS","__spreadArray","OPTION_TYPES","boundContainer","portalContainer","dragContainer","selectableTargets","Array","selectByClick","Boolean","selectFromInside","continueSelect","toggleContinueSelect","toggleContinueSelectWithoutDeselect","keyContainer","hitRate","Number","scrollOptions","Object","checkInput","preventDefault","cspNonce","String","getElementRect","Function","preventDragFromInside","rootContainer","dragCondition","clickBySelectEnd","preventClickEventOnDragStart","preventClickEventOnDrag","checkOverflow","__extends","options","_super","_this","DragScroll","clickedTarget","inputEvent","innerWidth","window","innerHeight","findSelectableTargets","startSelectedTargets","selectedTargets","scaleMatrix","createMatrix","containerX","Infinity","containerY","hitRect","containerRect","getDistElementMatrix","boundElement","boundInfo","isObject","element","isString","querySelector","firstPassedTargets","hasInsideTargets","pointTarget","_findElement","isPreventSelect","stop","type","isClick","emit","startPassedTargets","_select","selectFlag","target","offsetPos","calculateMatrixDist","cssText","_selectEnd","dragScroll","dragStart","preventDrag","drag","_checkSelected","isDouble","isDrag","isSelect","dragEnd","result","isKeyDown","_keydownContinueSelect","_sameCombiKey","_keydownContinueSelectWithoutDeselection","keydownContinueSelect","keydownContinueSelectWithoutDeselection","isKeyUp","containers","gesto","isFlag","documentElement","Element","slice","call","some","contains","undefined","parentElement","body","initElement","initDragScroll","setKeyController","__proto","beforeSelected","this","selected","point1","point2","ignoreClick","selectedElements","hitTest","setSelectedTargets","startPoint","endPoint","mousedown","MouseEvent","cancelable","bubbles","mousemove","mouseup","onDragStart","onDrag","onDragEnd","triggerDragStart","off","keycon","destroy","unset","injectResult","removeEvent","_onDocumentSelectStart","info","selectableElements","elements","isFunction","push","Node","value","current","querySelectorAll","checkScroll","getCurrentEvent","parentMap_1","getEventData","getSelectableElements","selectablePoints","getElementPoints","Map","selectableInners","parents","get","getComputedStyle","overflow","prevParentElement","set","getOverlapPoints","_refreshGroups","touch","touches","changedTouches","dragEvent","isTrusted","_onDragStart","_onDragEnd","KeyController","keydown","_onKeyDown","keyup","_onKeyUp","on","_onBlur","setKeyEvent","preventClickEventByCondition","preventRightClick","parentNode","Gesto","checkWindowBlur","_onDrag","addEvent","inject","nonce","selectRect","gestoEvent","selectableTargets_1","selectablePoints_1","selectableInners_1","innerGroups","rectPoints","hitRateValue","splitUnit","isHit","inArea","isInside","overlapPoints","overlapSize","getAreaSize","targetSize","unit","between","round","filter","_","minX","floor","maxX","minY","maxY","x","yGroups","y","group","targets","inners","nextPoints","filterDuplicated","arr","indexOf","has","direction","offsetX","offsetY","pos","scrollBy","isStart","afterAdded","afterRemoved","afterPrevList","afterList","isDragStart","startSelected","offsetSize","passedTargets","keys","isKeyup","singleKey_1","combi","getCombi","key","nextKeys","concat","toggleKeys","isArray","every","selectableTargets_2","selectableInners_2","groups_1","groupPoints","prototype","property","enumerable","configurable","getter","camelize","setter","defineProperty","Selecto","EventEmitter","modules"],"mappings":"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"}