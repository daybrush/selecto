{"version":3,"file":"selecto.min.js","sources":["../src/utils.ts","../src/consts.ts","../src/index.umd.ts","../src/Selecto.tsx","../src/SelectoManager.tsx"],"sourcesContent":["import type { Hypertext, Rect } from \"./types\";\nimport { IObject, addClass, hasClass, calculateBoundSize, getDist } from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport { getMinMaxs } from \"overlap-area\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0] || e.changedTouches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\nexport function filterDuplicated<T>(arr: T[]): T[] {\n    if (typeof Map === \"undefined\") {\n        return arr.filter((value, index) => {\n            return arr.indexOf(value) === index;\n        });\n    }\n    const map = new Map<T, true>();\n    return arr.filter(value => {\n        if (map.has(value)) {\n            return false;\n        }\n        map.set(value, true);\n        return true;\n    });\n}\nexport function elementFromPoint(clientX: number, clientY: number): HTMLElement | SVGElement | null {\n    return (document.elementFromPoint && document.elementFromPoint(clientX, clientY)) as any || null;\n}\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\nexport function isFastInside(point: number[], points: number[][]) {\n    const { minX, minY, maxX, maxY } = getMinMaxs(points);\n    const [x, y] = point;\n\n    return minX <= x && x <= maxX && minY <= y && y <= maxY;\n}\nexport function getFastOverlapPoints(points1: number[][], points2: number[][]) {\n    const {\n        minX: minX1,\n        minY: minY1,\n        maxX: maxX1,\n        maxY: maxY1,\n    } = getMinMaxs(points1);\n    const {\n        minX: minX2,\n        minY: minY2,\n        maxX: maxX2,\n        maxY: maxY2,\n    } = getMinMaxs(points2);\n\n    if (maxX2 < minX1 || maxX1 < minX2 || maxY2 < minY1 || maxY1 < minY2) {\n        return [];\n    }\n    const width = Math.min(maxX2 - minX1, maxX1 - minX2);\n    const height = Math.min(maxY2 - minY1, maxY1 - minY2);\n\n    return [\n        [0, 0],\n        [width, 0],\n        [width, height],\n        [0, height],\n    ];\n}\nexport function getRect(\n    e: any, ratio: number,\n    boundArea = e.data.boundArea,\n): Rect {\n    let {\n        distX = 0,\n        distY = 0,\n    } = e;\n    const { startX, startY } = e.data;\n\n    if (ratio > 0) {\n        const nextHeight = Math.sqrt((distX * distX + distY * distY) / (1 + ratio * ratio));\n        const nextWidth = ratio * nextHeight;\n\n        distX = (distX >= 0 ? 1 : -1) * nextWidth;\n        distY = (distY >= 0 ? 1 : -1) * nextHeight;\n    }\n    let width = Math.abs(distX);\n    let height = Math.abs(distY);\n\n    const maxWidth = distX < 0 ? startX - boundArea.left : boundArea.right - startX;\n    const maxHeight = distY < 0 ? startY - boundArea.top : boundArea.bottom - startY;\n\n    [width, height] = calculateBoundSize([width, height], [0, 0], [maxWidth, maxHeight], !!ratio);\n    distX = (distX >= 0 ? 1 : -1) * width;\n    distY = (distY >= 0 ? 1 : -1) * height;\n\n    const tx = Math.min(0, distX);\n    const ty = Math.min(0, distY);\n    const left = startX + tx;\n    const top = startY + ty;\n\n    return {\n        left,\n        top,\n        right: left + width,\n        bottom: top + height,\n        width,\n        height,\n    };\n}\n\nexport function getDefaultElementRect(el: HTMLElement | SVGElement) {\n    const rect = el.getBoundingClientRect();\n    const { left, top, width, height } = rect;\n\n    return {\n        pos1: [left, top],\n        pos2: [left + width, top],\n        pos3: [left, top + height],\n        pos4: [left + width, top + height],\n    };\n}\n\nexport function passTargets(\n    beforeTargets: Array<HTMLElement | SVGElement>,\n    afterTargets: Array<HTMLElement | SVGElement>,\n    continueSelectWithoutDeselect: boolean,\n) {\n    const {\n        list,\n        prevList,\n        added,\n        removed,\n        maintained,\n    } = diff(beforeTargets, afterTargets);\n\n    return [\n        ...added.map(index => list[index]),\n        ...removed.map(index => prevList[index]),\n        ...continueSelectWithoutDeselect ? maintained.map(([, nextIndex]) => list[nextIndex]) : [],\n    ];\n}\n\nexport function getLineSize(points: number[][]) {\n    let size = 0;\n    const length = points.length;\n\n    for (let i = 1; i < length; ++i) {\n        size = Math.max(getDist(points[i], points[i - 1]), size);\n    }\n\n    return size;\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    pointer-events: none;\n    will-change: transform;\n    z-index: 100;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\nexport const PROPERTIES = [\n    \"boundContainer\",\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"continueSelectWithoutDeselect\",\n    \"toggleContinueSelect\",\n    \"toggleContinueSelectWithoutDeselect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n    \"checkInput\",\n    \"preventDefault\",\n    \"ratio\",\n    \"getElementRect\",\n    \"preventDragFromInside\",\n    \"rootContainer\",\n    \"dragCondition\",\n    \"clickBySelectEnd\",\n] as const;\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    \"cspNonce\",\n    \"preventClickEventOnDrag\",\n    \"preventClickEventOnDragStart\",\n    \"preventRightClick\",\n    ...PROPERTIES,\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    boundContainer: null,\n    portalContainer: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    toggleContinueSelectWithoutDeselect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n    checkInput: Boolean,\n    preventDefault: Boolean,\n    cspNonce: String,\n    ratio: Number,\n    getElementRect: Function,\n    preventDragFromInside: Boolean,\n    rootContainer: Object,\n    dragCondition: Function,\n    clickBySelectEnd: Boolean,\n    continueSelectWithoutDeselect: Boolean,\n    preventClickEventOnDragStart: Boolean,\n    preventClickEventOnDrag: Boolean,\n};\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"drag\",\n    \"dragEnd\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"clickTarget\",\n    \"getSelectableElements\",\n    \"setSelectedTargets\",\n    \"getElementPoints\",\n    \"getSelectedTargets\",\n    \"findSelectableTargets\",\n    \"triggerDragStart\",\n    \"checkScroll\",\n    \"selectTargetsByPoints\",\n    \"setSelectedTargetsByPoints\",\n] as const;\n","import Selecto, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Selecto as any)[name] = (modules as any)[name];\n}\n\nexport default Selecto;\n","import SelectoManager from \"./SelectoManager\";\n\nclass Selecto extends SelectoManager {\n\n}\nexport default Selecto;\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto, { OnDrag, OnDragStart } from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport {\n    isObject,\n    camelize,\n    IObject,\n    addEvent,\n    removeEvent,\n    isArray,\n    isString,\n    between,\n    splitUnit,\n} from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport DragScroll from \"@scena/dragscroll\";\nimport KeyController, { getCombi } from \"keycon\";\nimport {\n    getAreaSize,\n    getOverlapPoints,\n    isInside,\n    fitPoints,\n} from \"overlap-area\";\nimport { getDistElementMatrix, calculateMatrixDist, createMatrix } from \"css-to-mat\";\nimport {\n    createElement,\n    h,\n    getClient,\n    diffValue,\n    getRect,\n    getDefaultElementRect,\n    passTargets,\n    elementFromPoint,\n    filterDuplicated,\n    getLineSize,\n} from \"./utils\";\nimport {\n    SelectoOptions,\n    SelectoProperties,\n    OnDragEvent,\n    SelectoEvents,\n    Rect,\n    BoundContainer,\n    InnerGroup,\n    SelectedTargets,\n    SelectedTargetsWithRect,\n} from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends EventEmitter\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const getter = camelize(`get ${property}`);\n    if (prototype[getter]) {\n        attributes.get = function get() {\n            return this[getter]();\n        };\n    } else {\n        attributes.get = function get() {\n            return this.options[property];\n        };\n    }\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function set(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function set(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends EventEmitter<SelectoEvents> {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window | Element[];\n    private container!: HTMLElement;\n    private gesto!: Gesto;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private dragScroll: DragScroll = new DragScroll();\n    private keycon!: KeyController;\n    private _keydownContinueSelect: boolean;\n    private _keydownContinueSelectWithoutDeselection: boolean;\n    /**\n     *\n     */\n    constructor(options: Partial<SelectoOptions> = {}) {\n        super();\n        this.target = options.portalContainer;\n        let container = options.container;\n        this.options = {\n            portalContainer: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            clickBySelectEnd: false,\n            hitRate: 100,\n            continueSelect: false,\n            continueSelectWithoutDeselect: false,\n            toggleContinueSelect: null,\n            toggleContinueSelectWithoutDeselect: null,\n            keyContainer: null,\n            scrollOptions: undefined,\n            checkInput: false,\n            preventDefault: false,\n            boundContainer: false,\n            preventDragFromInside: true,\n            dragCondition: null,\n            rootContainer: null,\n            getElementRect: getDefaultElementRect,\n            cspNonce: \"\",\n            ratio: 0,\n            ...options,\n        };\n        const portalContainer = this.options.portalContainer;\n\n        if (portalContainer) {\n            container = portalContainer.parentElement;\n        }\n        this.container = container || document.body;\n        this.initElement();\n        this.initDragScroll();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     * selectByClick, continueSelect, and continueSelectWithoutDeselect are not applied.\n     */\n    public setSelectedTargets(\n        selectedTargets: Array<HTMLElement | SVGElement>\n    ): SelectedTargets {\n        const beforeSelected = this.selectedTargets;\n        const { added, removed, prevList, list } = diff(\n            beforeSelected,\n            selectedTargets\n        );\n        this.selectedTargets = selectedTargets;\n\n        return {\n            added: added.map(index => list[index]),\n            removed: removed.map(index => prevList[index]),\n            beforeSelected,\n            selected: selectedTargets,\n        };\n    }\n    /**\n     * You can set the currently selected targets by points\n     * selectByClick, continueSelect, and continueSelectWithoutDeselect are not applied.\n     */\n    public setSelectedTargetsByPoints(\n        point1: number[],\n        point2: number[],\n    ): SelectedTargetsWithRect {\n        const left = Math.min(point1[0], point2[0]);\n        const top = Math.min(point1[1], point2[1]);\n        const right = Math.max(point1[0], point2[0]);\n        const bottom = Math.max(point1[1], point2[1]);\n        const rect: Rect = {\n            left,\n            top,\n            right,\n            bottom,\n            width: right - left,\n            height: bottom - top,\n        };\n        const data = { ignoreClick: true };\n\n        this.findSelectableTargets(data);\n        const selectedElements = this.hitTest(rect, data);\n        const result = this.setSelectedTargets(selectedElements);\n\n        return {\n            ...result,\n            rect,\n        };\n    }\n    /**\n     * Select target by virtual drag from startPoint to endPoint.\n     * The target of inputEvent is null.\n     */\n    public selectTargetsByPoints(\n        startPoint: number[],\n        endPoint: number[],\n    ) {\n        const mousedown = new MouseEvent(\"mousedown\", {\n            clientX: startPoint[0],\n            clientY: startPoint[1],\n            cancelable: true,\n            bubbles: true,\n        });\n        const mousemove = new MouseEvent(\"mousemove\", {\n            clientX: endPoint[0],\n            clientY: endPoint[1],\n            cancelable: true,\n            bubbles: true,\n        });\n        const mouseup = new MouseEvent(\"mousemove\", {\n            clientX: endPoint[0],\n            clientY: endPoint[1],\n            cancelable: true,\n            bubbles: true,\n        });\n        const gesto = this.gesto;\n        const result = gesto.onDragStart(mousedown);\n\n        if (result !== false) {\n            gesto.onDrag(mousemove);\n            gesto.onDragEnd(mouseup);\n        }\n    }\n    /**\n     * You can get the currently selected targets.\n     */\n    public getSelectedTargets(): Array<HTMLElement | SVGElement> {\n        return this.selectedTargets;\n    }\n    /**\n     * `OnDragStart` is triggered by an external event.\n     * @param - external event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto();\n     *\n     * window.addEventListener(\"mousedown\", e => {\n     *   selecto.triggerDragStart(e);\n     * });\n     */\n    public triggerDragStart(e: MouseEvent | TouchEvent) {\n        this.gesto.triggerDragStart(e);\n        return this;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.gesto.unset();\n        this.injectResult.destroy();\n        removeEvent(document, \"selectstart\", this._onDocumentSelectStart);\n\n        this.keycon = null;\n        this.gesto = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n    public getElementPoints(target: HTMLElement | SVGElement) {\n        const getElementRect = this.getElementRect || getDefaultElementRect;\n        const info = getElementRect(target);\n        const points = [info.pos1, info.pos2, info.pos4, info.pos3];\n\n        if (getElementRect !== getDefaultElementRect) {\n            const rect = target.getBoundingClientRect();\n\n            return fitPoints(points, rect);\n        }\n        return points;\n    }\n    /**\n     * Get all elements set in `selectableTargets`.\n     */\n    public getSelectableElements() {\n        const selectableElements: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach((target) => {\n            if (isObject(target)) {\n                selectableElements.push(target);\n            } else {\n                const elements = [].slice.call(\n                    document.querySelectorAll(target)\n                );\n\n                elements.forEach((el) => {\n                    selectableElements.push(el);\n                });\n            }\n        });\n\n        return selectableElements;\n    }\n    /**\n     * If scroll occurs during dragging, you can manually call this method to check the position again.\n     */\n    public checkScroll() {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        const scrollOptions = this.scrollOptions;\n\n        // If it is a scrolling position, pass drag\n        scrollOptions?.container && this.dragScroll.checkScroll({\n            inputEvent: this.gesto.getCurrentEvent(),\n            ...scrollOptions,\n        });\n    }\n    /**\n     * Find for selectableTargets again during drag event\n     */\n    public findSelectableTargets(data: any = this.gesto.getEventData()) {\n        const selectableTargets = this.getSelectableElements();\n        const selectablePoints = selectableTargets.map(\n            (target) => this.getElementPoints(target),\n        );\n        data.selectableTargets = selectableTargets;\n        data.selectablePoints = selectablePoints;\n        this._refreshGroups(data);\n    }\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    public clickTarget(\n        e: MouseEvent | TouchEvent,\n        clickedTarget?: Element\n    ): this {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent = {\n            data: {\n                selectFlag: false,\n            },\n            clientX,\n            clientY,\n            inputEvent: e,\n            isClick: true,\n            stop: () => {\n                return false;\n            },\n        } as any;\n        if (this._onDragStart(dragEvent, clickedTarget)) {\n            this._onDragEnd(dragEvent);\n        }\n        return this;\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect, toggleContinueSelectWithoutDeselect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect || toggleContinueSelectWithoutDeselect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon\n                .keydown(this._onKeyDown)\n                .keyup(this._onKeyUp)\n                .on(\"blur\", this._onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect, toggleContinueSelectWithoutDeselect } = this.options;\n        if ((!toggleContinueSelect && !toggleContinueSelectWithoutDeselect) || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    // with getter, setter property\n    private setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    private getContinueSelect() {\n        const {\n            continueSelect,\n            toggleContinueSelect,\n        } = this.options;\n\n        if (!toggleContinueSelect || !this._keydownContinueSelect) {\n            return continueSelect;\n        }\n        return !continueSelect;\n    }\n    private getContinueSelectWithoutDeselect() {\n        const {\n            continueSelectWithoutDeselect,\n            toggleContinueSelectWithoutDeselect,\n        } = this.options;\n\n        if (!toggleContinueSelectWithoutDeselect || !this._keydownContinueSelectWithoutDeselection) {\n            return continueSelectWithoutDeselect;\n        }\n        return !continueSelectWithoutDeselect;\n    }\n    private setToggleContinueSelect(\n        toggleContinueSelect: string[][] | string[] | string\n    ) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n    private setToggleContinueSelectWithoutDeselect(\n        toggleContinueSelectWithoutDeselect: string[][] | string[] | string\n    ) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelectWithoutDeselect, toggleContinueSelectWithoutDeselect, () => {\n            options.toggleContinueSelectWithoutDeselect = toggleContinueSelectWithoutDeselect;\n\n            this.setKeyEvent();\n        });\n    }\n    private setPreventDefault(value: boolean) {\n        this.gesto.options.preventDefault = value;\n    }\n    private setCheckInput(value: boolean) {\n        this.gesto.options.checkInput = value;\n    }\n    private initElement() {\n        this.target = createElement(\n            (<div className={CLASS_NAME}></div>) as any,\n            this.target,\n            this.container\n        );\n\n        const target = this.target;\n\n        const {\n            dragContainer,\n            checkInput,\n            preventDefault,\n            preventClickEventOnDragStart,\n            preventClickEventOnDrag,\n            preventClickEventByCondition,\n            preventRightClick = true,\n        } = this.options;\n        this.dragContainer =\n            typeof dragContainer === \"string\"\n                ? [].slice.call(document.querySelectorAll(dragContainer))\n                : dragContainer || (this.target.parentNode as any);\n        this.gesto = new Gesto(this.dragContainer, {\n            checkWindowBlur: true,\n            container: window,\n            checkInput,\n            preventDefault,\n            preventClickEventOnDragStart,\n            preventClickEventOnDrag,\n            preventClickEventByCondition,\n            preventRightClick,\n        }).on({\n            dragStart: this._onDragStart,\n            drag: this._onDrag,\n            dragEnd: this._onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this._onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target, {\n            nonce: this.options.cspNonce,\n        });\n    }\n    private hitTest(\n        selectRect: Rect,\n        data: any,\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n        const innerGroups: Record<string | number, Record<string | number, InnerGroup>> = data.innerGroups;\n        const innerWidth = data.innerWidth;\n        const innerHeight = data.innerHeight;\n        const clientX = data.clientX;\n        const clientY = data.clientY;\n        const ignoreClick = data.ignoreClick;\n        const rectPoints = [\n            [left, top],\n            [right, top],\n            [right, bottom],\n            [left, bottom],\n        ];\n        const hitRateValue = splitUnit(`${hitRate}`);\n\n        const isHit = (points: number[][]) => {\n            const inArea = ignoreClick ? false : isInside([clientX, clientY], points);\n\n            if (selectByClick && inArea) {\n                return true;\n            }\n            const overlapPoints = getOverlapPoints(rectPoints, points);\n\n            if (!overlapPoints.length) {\n                return false;\n            }\n            let overlapSize = getAreaSize(overlapPoints);\n\n            // Line\n            let targetSize = 0;\n\n            if (overlapSize === 0 && getAreaSize(points) === 0) {\n                targetSize = getLineSize(points);\n                overlapSize = getLineSize(overlapPoints);\n            } else {\n                targetSize = getAreaSize(points);\n            }\n\n\n            if (hitRateValue.unit === \"px\") {\n                return overlapSize >= hitRateValue.value;\n            } else {\n                const rate = between(\n                    Math.round((overlapSize / targetSize) * 100),\n                    0,\n                    100\n                );\n\n                return rate >= Math.min(100, hitRateValue.value);\n            }\n        };\n        if (!innerGroups) {\n            const selectableTargets: Array<HTMLElement | SVGElement> = data.selectableTargets;\n            const selectablePoints: number[][][] = data.selectablePoints;\n\n            return selectableTargets.filter((_, i) => {\n                return isHit(selectablePoints[i]);\n            });\n        }\n        let selectedTargets: Array<HTMLElement | SVGElement> = [];\n        const minX = Math.floor(left / innerWidth);\n        const maxX = Math.floor(right / innerWidth);\n        const minY = Math.floor(top / innerHeight);\n        const maxY = Math.floor(bottom / innerHeight);\n\n        for (let x = minX; x <= maxX; ++x) {\n            const yGroups = innerGroups[x];\n\n            if (!yGroups) {\n                continue;\n            }\n            for (let y = minY; y <= maxY; ++y) {\n                const group = yGroups[y];\n\n                if (!group) {\n                    continue;\n                }\n                const { points, targets } = group;\n\n                points.forEach((nextPoints, i) => {\n                    if (isHit(nextPoints)) {\n                        selectedTargets.push(targets[i]);\n                    }\n                });\n            }\n        }\n        return filterDuplicated(selectedTargets);\n    }\n    private initDragScroll() {\n        this.dragScroll\n            .on(\"scroll\", ({ container, direction }) => {\n                this.emit(\"scroll\", {\n                    container,\n                    direction,\n                });\n            })\n            .on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n                const gesto = this.gesto;\n\n                if (!gesto || !gesto.isFlag()) {\n                    return;\n                }\n\n                const data = this.gesto.getEventData();\n                const boundArea = data.boundArea;\n\n                data.startX -= offsetX;\n                data.startY -= offsetY;\n                data.selectablePoints.forEach((points: number[][]) => {\n                    points.forEach((pos) => {\n                        pos[0] -= offsetX;\n                        pos[1] -= offsetY;\n                    });\n                });\n                this._refreshGroups(data);\n\n                boundArea.left -= offsetX;\n                boundArea.right -= offsetX;\n                boundArea.top -= offsetY;\n                boundArea.bottom -= offsetY;\n\n                this.gesto.scrollBy(\n                    offsetX,\n                    offsetY,\n                    inputEvent.inputEvent,\n                    false\n                );\n                this._checkSelected(this.gesto.getCurrentEvent());\n            });\n    }\n    private _select(\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        e: OnDragEvent,\n        isStart?: boolean\n    ) {\n        const inputEvent = e.inputEvent;\n        const data = e.data;\n        const result = this.setSelectedTargets(selectedTargets);\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.emit(\"selectStart\", {\n                ...result,\n                rect,\n                inputEvent,\n                data: data.data,\n            });\n        }\n        if (result.added.length || result.removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.emit(\"select\", {\n                ...result,\n                rect,\n                inputEvent,\n                data: data.data,\n            });\n        }\n    }\n    private _selectEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        startPassedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        e: OnDragEvent,\n    ) {\n        const { inputEvent, isDouble, data } = e;\n        const { added, removed, prevList, list } = diff(\n            startSelectedTargets,\n            this.selectedTargets\n        );\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(startPassedTargets, this.selectedTargets);\n        const type = inputEvent && inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"selectEnd\", {\n            startSelected: startSelectedTargets,\n            beforeSelected: startPassedTargets,\n            selected: this.selectedTargets,\n            added: added.map((index) => list[index]),\n            removed: removed.map((index) => prevList[index]),\n            afterAdded: afterAdded.map((index) => afterList[index]),\n            afterRemoved: afterRemoved.map((index) => afterPrevList[index]),\n            isDragStart,\n            isClick: !!e.isClick,\n            isDouble: !!isDouble,\n            rect,\n            inputEvent,\n            data: data.data,\n        });\n    }\n    private _onDragStart = (e: OnDragStart, clickedTarget?: Element) => {\n        const { data, clientX, clientY, inputEvent } = e;\n        const {\n            selectFromInside,\n            selectByClick,\n            rootContainer,\n            boundContainer,\n            preventDragFromInside = true,\n            clickBySelectEnd,\n            dragCondition,\n        } = this.options;\n\n        if (dragCondition && !dragCondition(e)) {\n            e.stop();\n            return;\n        }\n        data.data = {};\n        data.innerWidth = window.innerWidth;\n        data.innerHeight = window.innerHeight;\n        this.findSelectableTargets(data);\n        data.startSelectedTargets = this.selectedTargets;\n        data.scaleMatrix = createMatrix();\n        data.containerX = 0;\n        data.containerY = 0;\n\n\n        let boundArea = {\n            left: -Infinity,\n            top: -Infinity,\n            right: Infinity,\n            bottom: Infinity,\n        };\n        if (rootContainer) {\n            const containerRect = this.container.getBoundingClientRect();\n\n            data.containerX = containerRect.left;\n            data.containerY = containerRect.top;\n            data.scaleMatrix = getDistElementMatrix(this.container, rootContainer);\n        }\n\n        if (boundContainer) {\n            const boundInfo: Required<BoundContainer> =\n                isObject(boundContainer) && \"element\" in boundContainer\n                    ? {\n                        left: true,\n                        top: true,\n                        bottom: true,\n                        right: true,\n                        ...boundContainer,\n                    }\n                    : {\n                        element: boundContainer,\n                        left: true,\n                        top: true,\n                        bottom: true,\n                        right: true,\n                    };\n            const boundElement = boundInfo.element;\n            let rectElement: HTMLElement;\n\n            if (boundElement) {\n                if (isString(boundElement)) {\n                    rectElement = document.querySelector(boundElement);\n                } else if (boundElement === true) {\n                    rectElement = this.container;\n                } else {\n                    rectElement = boundElement;\n                }\n                const rect = rectElement.getBoundingClientRect();\n\n                if (boundInfo.left) {\n                    boundArea.left = rect.left;\n                }\n                if (boundInfo.top) {\n                    boundArea.top = rect.top;\n                }\n                if (boundInfo.right) {\n                    boundArea.right = rect.right;\n                }\n                if (boundInfo.bottom) {\n                    boundArea.bottom = rect.bottom;\n                }\n            }\n        }\n\n        data.boundArea = boundArea;\n\n        const hitRect = {\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n            width: 0,\n            height: 0,\n        };\n        let firstPassedTargets: Array<HTMLElement | SVGElement> = [];\n\n        if (!selectFromInside || (selectByClick && !clickBySelectEnd)) {\n            const pointTarget = this._findElement(\n                clickedTarget || elementFromPoint(clientX, clientY),\n                data.selectableTargets,\n            );\n            firstPassedTargets = pointTarget ? [pointTarget] : [];\n        }\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        const isPreventSelect = !selectFromInside && hasInsideTargets;\n\n        // prevent drag from inside when selectByClick is false\n        if (isPreventSelect && !selectByClick) {\n            e.stop();\n            return false;\n        }\n\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts (triggers on mousedown or touchstart), the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result =\n            !(e as any).isClick && isTrusted\n                ? this.emit(\"dragStart\", { ...e, data: data.data })\n                : true;\n\n        if (!result) {\n            e.stop();\n            return false;\n        }\n\n        if (this.continueSelect) {\n            firstPassedTargets = passTargets(\n                this.selectedTargets,\n                firstPassedTargets,\n                this.continueSelectWithoutDeselect,\n            );\n            data.startPassedTargets = this.selectedTargets;\n        } else {\n            data.startPassedTargets = [];\n        }\n        this._select(\n            firstPassedTargets,\n            hitRect,\n            e,\n            true\n        );\n        data.startX = clientX;\n        data.startY = clientY;\n        data.selectFlag = false;\n        data.preventDragFromInside = false;\n\n        if (inputEvent.target) {\n            const offsetPos = calculateMatrixDist(data.scaleMatrix, [\n                clientX - data.containerX,\n                clientY - data.containerY,\n            ]);\n            this.target.style.cssText += `position: ${rootContainer ? \"absolute\" : \"fixed\"};`\n                + `left:0px;top:0px;`\n                + `transform: translate(${offsetPos[0]}px, ${offsetPos[1]}px)`;\n        }\n\n        if (isPreventSelect && selectByClick && !clickBySelectEnd) {\n            inputEvent.preventDefault();\n\n            // prevent drag from inside when selectByClick is true and force call `selectEnd`\n            if (preventDragFromInside) {\n                this._selectEnd(\n                    data.startSelectedTargets,\n                    data.startPassedTargets,\n                    hitRect,\n                    e\n                );\n                data.preventDragFromInside = true;\n            }\n        } else {\n            data.selectFlag = true;\n            if (type === \"touchstart\") {\n                inputEvent.preventDefault();\n            }\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                this.dragScroll.dragStart(e, scrollOptions);\n            }\n            if (clickBySelectEnd) {\n                data.selectFlag = false;\n                e.preventDrag();\n            }\n        }\n        return true;\n    };\n    private _checkSelected(e: any, rect = getRect(e, this.options.ratio)) {\n        const { data } = e;\n        const { top, left, width, height } = rect;\n        const selectFlag = data.selectFlag;\n        const {\n            containerX,\n            containerY,\n            scaleMatrix,\n        } = data;\n        const offsetPos = calculateMatrixDist(scaleMatrix, [\n            left - containerX,\n            top - containerY,\n        ]);\n        const offsetSize = calculateMatrixDist(scaleMatrix, [\n            width,\n            height,\n        ]);\n        let selectedTargets: Array<HTMLElement | SVGElement> = [];\n        if (selectFlag) {\n            this.target.style.cssText +=\n                `display: block;` +\n                `left:0px;top:0px;` +\n                `transform: translate(${offsetPos[0]}px, ${offsetPos[1]}px);` +\n                `width:${offsetSize[0]}px;height:${offsetSize[1]}px;`;\n\n            const passedTargets = this.hitTest(\n                rect,\n                data,\n            );\n            selectedTargets = passTargets(\n                data.startPassedTargets,\n                passedTargets,\n                this.continueSelect && this.continueSelectWithoutDeselect,\n            );\n        }\n        /**\n         * When the drag, the drag event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event drag\n         * @param {OnDrag} - Parameters for the drag event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"drag\", e => {\n         *   e.stop();\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result = this.emit(\"drag\", {\n            ...e,\n            data: data.data,\n            isSelect: selectFlag,\n            rect,\n        });\n        if (result === false) {\n            this.target.style.cssText += \"display: none;\";\n            e.stop();\n            return;\n        }\n\n        if (selectFlag) {\n            this._select(selectedTargets, rect, e);\n        }\n    }\n    private _onDrag = (e: OnDrag) => {\n        if (e.data.selectFlag) {\n            const scrollOptions = this.scrollOptions;\n\n            // If it is a scrolling position, pass drag\n            if (scrollOptions?.container && this.dragScroll.drag(e, scrollOptions)) {\n                return;\n            }\n        }\n        this._checkSelected(e);\n    };\n    private _onDragEnd = (e: OnDragEvent) => {\n        const { data, inputEvent } = e;\n        const rect = getRect(e, this.options.ratio);\n        const selectFlag = data.selectFlag;\n\n        /**\n         * When the drag ends (triggers on mouseup or touchend after drag), the dragEnd event is called.\n         * @memberof Selecto\n         * @event dragEnd\n         * @param {OnDragEnd} - Parameters for the dragEnd event\n         */\n        if (inputEvent) {\n            this.emit(\"dragEnd\", {\n                isDouble: !!e.isDouble,\n                isClick: !!e.isClick,\n                isDrag: false,\n                isSelect: selectFlag,\n                ...e,\n                data: data.data,\n                rect,\n            });\n        }\n        this.target.style.cssText += \"display: none;\";\n\n        if (selectFlag) {\n            data.selectFlag = false;\n            this.dragScroll.dragEnd();\n        } else if (this.selectByClick && this.clickBySelectEnd) {\n            // only clickBySelectEnd\n            const pointTarget = this._findElement(\n                elementFromPoint(e.clientX, e.clientY),\n                data.selectableTargets,\n            );\n            this._select(pointTarget ? [pointTarget] : [], rect, e);\n        }\n        if (!data.preventDragFromInside) {\n            this._selectEnd(\n                data.startSelectedTargets,\n                data.startPassedTargets,\n                rect,\n                e\n            );\n        }\n    };\n    private _sameCombiKey(e: any, keys: string | string[] | string[][], isKeyup?: boolean) {\n        if (!keys) {\n            return false;\n        }\n        const combi = getCombi(e.inputEvent, e.key);\n        const nextKeys = [].concat(keys);\n        const toggleKeys = isArray(nextKeys[0]) ? nextKeys : [nextKeys];\n\n        if (isKeyup) {\n            const singleKey = e.key;\n\n            return toggleKeys.some((keys) =>\n                keys.some((key) => key === singleKey)\n            );\n        }\n        return toggleKeys.some((keys) =>\n            keys.every((key) => combi.indexOf(key) > -1)\n        );\n    }\n    private _onKeyDown = (e: any) => {\n        const options = this.options;\n        let isKeyDown = false;\n\n        if (!this._keydownContinueSelect) {\n            const result = this._sameCombiKey(e, options.toggleContinueSelect);\n\n            this._keydownContinueSelect = result;\n            isKeyDown = result;\n        }\n        if (!this._keydownContinueSelectWithoutDeselection) {\n            const result = this._sameCombiKey(e, options.toggleContinueSelectWithoutDeselect);\n\n            this._keydownContinueSelectWithoutDeselection = result;\n            isKeyDown = isKeyDown || result;\n        }\n        if (!isKeyDown) {\n            return;\n        }\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"keydown\", {\n            keydownContinueSelect: this._keydownContinueSelect,\n            keydownContinueSelectWithoutDeselection: this._keydownContinueSelectWithoutDeselection,\n        });\n    };\n    private _onKeyUp = (e: any) => {\n        const options = this.options;\n        let isKeyUp = false;\n\n        if (this._keydownContinueSelect) {\n            const result = this._sameCombiKey(e, options.toggleContinueSelect, true);\n            this._keydownContinueSelect = !result;\n\n            isKeyUp = result;\n        }\n        if (this._keydownContinueSelectWithoutDeselection) {\n            const result = this._sameCombiKey(e, options.toggleContinueSelectWithoutDeselect, true);\n            this._keydownContinueSelectWithoutDeselection = !result;\n\n            isKeyUp = isKeyUp || result;\n        }\n        if (!isKeyUp) {\n            return;\n        }\n\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"keyup\", {\n            keydownContinueSelect: this._keydownContinueSelect,\n            keydownContinueSelectWithoutDeselection: this._keydownContinueSelectWithoutDeselection,\n        });\n    };\n    private _onBlur = () => {\n        if (this._keydownContinueSelect || this._keydownContinueSelectWithoutDeselection) {\n            this._keydownContinueSelect = false;\n            this._keydownContinueSelectWithoutDeselection = false;\n            this.emit(\"keyup\", {\n                keydownContinueSelect: this._keydownContinueSelect,\n                keydownContinueSelectWithoutDeselection: this._keydownContinueSelectWithoutDeselection,\n            });\n        }\n    };\n    private _onDocumentSelectStart = (e: any) => {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        const containers =\n            dragContainer instanceof Element\n                ? [dragContainer]\n                : ([].slice.call(dragContainer) as Element[]);\n        const target = e.target;\n\n        containers.some((container) => {\n            if (container === target || container.contains(target)) {\n                e.preventDefault();\n                return true;\n            }\n        });\n    };\n    private _findElement(clickedTarget: Element | null, selectableTargets: Array<Element>): HTMLElement | SVGElement {\n        let pointTarget = clickedTarget;\n\n        while (pointTarget) {\n            if (selectableTargets.indexOf(pointTarget) > -1) {\n                break;\n            }\n            pointTarget = pointTarget.parentElement;\n        }\n        return pointTarget as any;\n    }\n    private _refreshGroups(data: any) {\n        const innerWidth = data.innerWidth;\n        const innerHeight = data.innerHeight;\n\n        if (!innerWidth || !innerHeight) {\n            data.innerGroups = null;\n        } else {\n            const selectableTargets: Array<HTMLElement | SVGElement> = data.selectableTargets;\n            const selectablePoints: number[][][] = data.selectablePoints;\n            const groups: Record<string | number, Record<string | number, InnerGroup>> = {};\n\n            selectablePoints.forEach((points, i) => {\n                let minX = Infinity;\n                let maxX = -Infinity;\n                let minY = Infinity;\n                let maxY = -Infinity;\n\n                points.forEach(pos => {\n                    const x = Math.floor(pos[0] / innerWidth);\n                    const y = Math.floor(pos[1] / innerHeight);\n\n                    minX = Math.min(x, minX);\n                    maxX = Math.max(x, maxX);\n                    minY = Math.min(y, minY);\n                    maxY = Math.max(y, maxY);\n                });\n\n                for (let x = minX; x <= maxX; ++x) {\n                    for (let y = minY; y <= maxY; ++y) {\n                        groups[x] = groups[x] || {};\n                        groups[x][y] = groups[x][y] || {\n                            points: [],\n                            targets: [],\n                        };\n\n                        const { targets, points: groupPoints } = groups[x][y];\n\n                        targets.push(selectableTargets[i]);\n                        groupPoints.push(points);\n                    }\n                }\n            });\n\n            data.innerGroups = groups;\n        }\n    }\n}\n\ninterface Selecto extends SelectoProperties { }\n\nexport default Selecto;\n"],"names":["elementFromPoint","clientX","clientY","document","createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","name","setAttribute","elChildren","forEach","child","i","split","elStyle","appendChild","h","attrs","_i","_a","_b","_c","diffValue","prev","cur","func","getRect","e","ratio","boundArea","data","distX","distY","_d","startX","startY","nextHeight","Math","sqrt","width","calculateBoundSize","abs","left","right","top","bottom","height","min","getDefaultElementRect","rect","getBoundingClientRect","pos1","pos2","pos3","pos4","passTargets","beforeTargets","afterTargets","continueSelectWithoutDeselect","diff","list","prevList","added","removed","maintained","map","index","nextIndex","getLineSize","points","size","length","max","getDist","injector","CLASS_NAME","PROPERTIES","OPTIONS","__spreadArray","OPTION_TYPES","boundContainer","portalContainer","dragContainer","selectableTargets","Array","selectByClick","Boolean","selectFromInside","continueSelect","toggleContinueSelect","toggleContinueSelectWithoutDeselect","keyContainer","hitRate","Number","scrollOptions","Object","checkInput","preventDefault","cspNonce","String","getElementRect","Function","preventDragFromInside","rootContainer","dragCondition","clickBySelectEnd","preventClickEventOnDragStart","preventClickEventOnDrag","__extends","options","_super","_this","DragScroll","clickedTarget","inputEvent","innerWidth","window","innerHeight","findSelectableTargets","startSelectedTargets","selectedTargets","scaleMatrix","createMatrix","containerX","Infinity","containerY","hitRect","containerRect","getDistElementMatrix","boundElement","boundInfo","isObject","element","isString","querySelector","firstPassedTargets","hasInsideTargets","pointTarget","_findElement","isPreventSelect","stop","type","isClick","emit","startPassedTargets","_select","selectFlag","target","offsetPos","calculateMatrixDist","cssText","_selectEnd","dragScroll","dragStart","preventDrag","drag","_checkSelected","isDouble","isDrag","isSelect","dragEnd","result","isKeyDown","_keydownContinueSelect","_sameCombiKey","_keydownContinueSelectWithoutDeselection","keydownContinueSelect","keydownContinueSelectWithoutDeselection","isKeyUp","containers","gesto","isFlag","documentElement","Element","slice","call","some","contains","undefined","parentElement","body","initElement","initDragScroll","setKeyController","__proto","beforeSelected","this","selected","point1","point2","ignoreClick","selectedElements","hitTest","setSelectedTargets","startPoint","endPoint","mousedown","MouseEvent","cancelable","bubbles","mousemove","mouseup","onDragStart","onDrag","onDragEnd","triggerDragStart","off","keycon","destroy","unset","injectResult","removeEvent","_onDocumentSelectStart","info","selectableElements","push","querySelectorAll","checkScroll","getCurrentEvent","getEventData","getSelectableElements","selectablePoints","getElementPoints","_refreshGroups","touch","touches","changedTouches","dragEvent","_onDragStart","_onDragEnd","KeyController","keydown","_onKeyDown","keyup","_onKeyUp","on","_onBlur","setKeyEvent","value","preventClickEventByCondition","preventRightClick","parentNode","Gesto","checkWindowBlur","_onDrag","addEvent","inject","nonce","selectRect","selectablePoints_1","innerGroups","rectPoints","hitRateValue","splitUnit","isHit","inArea","isInside","overlapPoints","getOverlapPoints","overlapSize","getAreaSize","targetSize","unit","between","round","filter","_","minX","floor","maxX","minY","maxY","x","yGroups","y","group","targets","nextPoints","filterDuplicated","arr","Map","indexOf","has","set","direction","offsetX","offsetY","pos","scrollBy","isStart","afterAdded","afterRemoved","afterPrevList","afterList","isDragStart","startSelected","offsetSize","passedTargets","keys","isKeyup","singleKey_1","combi","getCombi","key","nextKeys","concat","toggleKeys","isArray","every","selectableTargets_1","groups_1","groupPoints","prototype","property","enumerable","configurable","get","getter","camelize","setter","defineProperty","Selecto","EventEmitter","modules"],"mappings":"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"}