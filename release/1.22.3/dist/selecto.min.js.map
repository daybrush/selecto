{"version":3,"file":"selecto.min.js","sources":["../src/utils.ts","../src/consts.ts","../src/index.umd.ts","../src/Selecto.tsx","../src/SelectoManager.tsx"],"sourcesContent":["import type { Hypertext, Point, Rect } from \"./types\";\nimport { IObject, addClass, hasClass, calculateBoundSize, getDist } from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport { getMinMaxs } from \"overlap-area\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0] || e.changedTouches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\nexport function filterDuplicated<T>(arr: T[]): T[] {\n    if (typeof Map === \"undefined\") {\n        return arr.filter((value, index) => {\n            return arr.indexOf(value) === index;\n        });\n    }\n    const map = new Map<T, true>();\n    return arr.filter(value => {\n        if (map.has(value)) {\n            return false;\n        }\n        map.set(value, true);\n        return true;\n    });\n}\nexport function elementFromPoint(clientX: number, clientY: number): HTMLElement | SVGElement | null {\n    return (document.elementFromPoint && document.elementFromPoint(clientX, clientY)) as any || null;\n}\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\nexport function isFastInside(point: number[], points: number[][]) {\n    const { minX, minY, maxX, maxY } = getMinMaxs(points);\n    const [x, y] = point;\n\n    return minX <= x && x <= maxX && minY <= y && y <= maxY;\n}\nexport function getFastOverlapPoints(points1: number[][], points2: number[][]) {\n    const {\n        minX: minX1,\n        minY: minY1,\n        maxX: maxX1,\n        maxY: maxY1,\n    } = getMinMaxs(points1);\n    const {\n        minX: minX2,\n        minY: minY2,\n        maxX: maxX2,\n        maxY: maxY2,\n    } = getMinMaxs(points2);\n\n    if (maxX2 < minX1 || maxX1 < minX2 || maxY2 < minY1 || maxY1 < minY2) {\n        return [];\n    }\n    const width = Math.min(maxX2 - minX1, maxX1 - minX2);\n    const height = Math.min(maxY2 - minY1, maxY1 - minY2);\n\n    return [\n        [0, 0],\n        [width, 0],\n        [width, height],\n        [0, height],\n    ];\n}\nexport function getRect(\n    e: any, ratio: number,\n    boundArea = e.data.boundArea,\n): Rect {\n    let {\n        distX = 0,\n        distY = 0,\n    } = e;\n    const { startX, startY } = e.data;\n\n    if (ratio > 0) {\n        const nextHeight = Math.sqrt((distX * distX + distY * distY) / (1 + ratio * ratio));\n        const nextWidth = ratio * nextHeight;\n\n        distX = (distX >= 0 ? 1 : -1) * nextWidth;\n        distY = (distY >= 0 ? 1 : -1) * nextHeight;\n    }\n    let width = Math.abs(distX);\n    let height = Math.abs(distY);\n\n    const maxWidth = distX < 0 ? startX - boundArea.left : boundArea.right - startX;\n    const maxHeight = distY < 0 ? startY - boundArea.top : boundArea.bottom - startY;\n\n    [width, height] = calculateBoundSize([width, height], [0, 0], [maxWidth, maxHeight], !!ratio);\n    distX = (distX >= 0 ? 1 : -1) * width;\n    distY = (distY >= 0 ? 1 : -1) * height;\n\n    const tx = Math.min(0, distX);\n    const ty = Math.min(0, distY);\n    const left = startX + tx;\n    const top = startY + ty;\n\n    return {\n        left,\n        top,\n        right: left + width,\n        bottom: top + height,\n        width,\n        height,\n    };\n}\n\nexport function getDefaultElementRect(el: HTMLElement | SVGElement): Point {\n    const rect = el.getBoundingClientRect();\n    const { left, top, width, height } = rect;\n\n    return {\n        pos1: [left, top],\n        pos2: [left + width, top],\n        pos3: [left, top + height],\n        pos4: [left + width, top + height],\n    };\n}\n\nexport function passTargets(\n    beforeTargets: Array<HTMLElement | SVGElement>,\n    afterTargets: Array<HTMLElement | SVGElement>,\n    continueSelectWithoutDeselect: boolean,\n) {\n    const {\n        list,\n        prevList,\n        added,\n        removed,\n        maintained,\n    } = diff(beforeTargets, afterTargets);\n\n    return [\n        ...added.map(index => list[index]),\n        ...removed.map(index => prevList[index]),\n        ...continueSelectWithoutDeselect ? maintained.map(([, nextIndex]) => list[nextIndex]) : [],\n    ];\n}\n\nexport function getLineSize(points: number[][]) {\n    let size = 0;\n    const length = points.length;\n\n    for (let i = 1; i < length; ++i) {\n        size = Math.max(getDist(points[i], points[i - 1]), size);\n    }\n\n    return size;\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    pointer-events: none;\n    will-change: transform;\n    z-index: 100;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\nexport const PROPERTIES = [\n    \"boundContainer\",\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"continueSelectWithoutDeselect\",\n    \"toggleContinueSelect\",\n    \"toggleContinueSelectWithoutDeselect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n    \"checkInput\",\n    \"preventDefault\",\n    \"ratio\",\n    \"getElementRect\",\n    \"preventDragFromInside\",\n    \"rootContainer\",\n    \"dragCondition\",\n    \"clickBySelectEnd\",\n    \"checkOverflow\",\n    \"innerScrollOptions\",\n] as const;\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    \"cspNonce\",\n    \"preventClickEventOnDrag\",\n    \"preventClickEventOnDragStart\",\n    \"preventRightClick\",\n    ...PROPERTIES,\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    boundContainer: null,\n    portalContainer: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    toggleContinueSelectWithoutDeselect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n    checkInput: Boolean,\n    preventDefault: Boolean,\n    cspNonce: String,\n    ratio: Number,\n    getElementRect: Function,\n    preventDragFromInside: Boolean,\n    rootContainer: Object,\n    dragCondition: Function,\n    clickBySelectEnd: Boolean,\n    continueSelectWithoutDeselect: Boolean,\n    preventClickEventOnDragStart: Boolean,\n    preventClickEventOnDrag: Boolean,\n    checkOverflow: Boolean,\n    innerScrollOptions: Object,\n};\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"drag\",\n    \"dragEnd\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n    \"innerScroll\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"clickTarget\",\n    \"getSelectableElements\",\n    \"setSelectedTargets\",\n    \"getElementPoints\",\n    \"getSelectedTargets\",\n    \"findSelectableTargets\",\n    \"triggerDragStart\",\n    \"checkScroll\",\n    \"selectTargetsByPoints\",\n    \"setSelectedTargetsByPoints\",\n] as const;\n","import Selecto, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Selecto as any)[name] = (modules as any)[name];\n}\n\nexport default Selecto;\n","import SelectoManager from \"./SelectoManager\";\n\nclass Selecto extends SelectoManager {\n\n}\nexport default Selecto;\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto, { OnDrag, OnDragStart } from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport {\n    isObject,\n    camelize,\n    IObject,\n    addEvent,\n    removeEvent,\n    isArray,\n    isString,\n    between,\n    splitUnit,\n    isFunction,\n} from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport DragScroll from \"@scena/dragscroll\";\nimport KeyController, { getCombi } from \"keycon\";\nimport {\n    getAreaSize,\n    getOverlapPoints,\n    isInside,\n    fitPoints,\n} from \"overlap-area\";\nimport { getDistElementMatrix, calculateMatrixDist, createMatrix } from \"css-to-mat\";\nimport {\n    createElement,\n    h,\n    getClient,\n    diffValue,\n    getRect,\n    getDefaultElementRect,\n    passTargets,\n    elementFromPoint,\n    filterDuplicated,\n    getLineSize,\n} from \"./utils\";\nimport {\n    SelectoOptions,\n    SelectoProperties,\n    OnDragEvent,\n    SelectoEvents,\n    Rect,\n    BoundContainer,\n    SelectedTargets,\n    SelectedTargetsWithRect,\n    InnerParentInfo,\n} from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends EventEmitter\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const getter = camelize(`get ${property}`);\n    if (prototype[getter]) {\n        attributes.get = function get() {\n            return this[getter]();\n        };\n    } else {\n        attributes.get = function get() {\n            return this.options[property];\n        };\n    }\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function set(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function set(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends EventEmitter<SelectoEvents> {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window | Element[];\n    private container!: HTMLElement;\n    private gesto!: Gesto;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private dragScroll: DragScroll = new DragScroll();\n    private keycon!: KeyController;\n    private _keydownContinueSelect: boolean;\n    private _keydownContinueSelectWithoutDeselection: boolean;\n    /**\n     *\n     */\n    constructor(options: Partial<SelectoOptions> = {}) {\n        super();\n        this.target = options.portalContainer;\n        let container = options.container;\n        this.options = {\n            portalContainer: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            clickBySelectEnd: false,\n            hitRate: 100,\n            continueSelect: false,\n            continueSelectWithoutDeselect: false,\n            toggleContinueSelect: null,\n            toggleContinueSelectWithoutDeselect: null,\n            keyContainer: null,\n            scrollOptions: undefined,\n            checkInput: false,\n            preventDefault: false,\n            boundContainer: false,\n            preventDragFromInside: true,\n            dragCondition: null,\n            rootContainer: null,\n            checkOverflow: false,\n            innerScrollOptions: false,\n            getElementRect: getDefaultElementRect,\n            cspNonce: \"\",\n            ratio: 0,\n            ...options,\n        };\n        const portalContainer = this.options.portalContainer;\n\n        if (portalContainer) {\n            container = portalContainer.parentElement;\n        }\n        this.container = container || document.body;\n        this.initElement();\n        this.initDragScroll();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     * selectByClick, continueSelect, and continueSelectWithoutDeselect are not applied.\n     */\n    public setSelectedTargets(\n        selectedTargets: Array<HTMLElement | SVGElement>\n    ): SelectedTargets {\n        const beforeSelected = this.selectedTargets;\n        const { added, removed, prevList, list } = diff(\n            beforeSelected,\n            selectedTargets\n        );\n        this.selectedTargets = selectedTargets;\n\n        return {\n            added: added.map(index => list[index]),\n            removed: removed.map(index => prevList[index]),\n            beforeSelected,\n            selected: selectedTargets,\n        };\n    }\n    /**\n     * You can set the currently selected targets by points\n     * selectByClick, continueSelect, and continueSelectWithoutDeselect are not applied.\n     */\n    public setSelectedTargetsByPoints(\n        point1: number[],\n        point2: number[],\n    ): SelectedTargetsWithRect {\n        const left = Math.min(point1[0], point2[0]);\n        const top = Math.min(point1[1], point2[1]);\n        const right = Math.max(point1[0], point2[0]);\n        const bottom = Math.max(point1[1], point2[1]);\n        const rect: Rect = {\n            left,\n            top,\n            right,\n            bottom,\n            width: right - left,\n            height: bottom - top,\n        };\n        const data = { ignoreClick: true };\n\n        this.findSelectableTargets(data);\n        const selectedElements = this.hitTest(rect, data);\n        const result = this.setSelectedTargets(selectedElements);\n\n        return {\n            ...result,\n            rect,\n        };\n    }\n    /**\n     * Select target by virtual drag from startPoint to endPoint.\n     * The target of inputEvent is null.\n     */\n    public selectTargetsByPoints(\n        startPoint: number[],\n        endPoint: number[],\n    ) {\n        const mousedown = new MouseEvent(\"mousedown\", {\n            clientX: startPoint[0],\n            clientY: startPoint[1],\n            cancelable: true,\n            bubbles: true,\n        });\n        const mousemove = new MouseEvent(\"mousemove\", {\n            clientX: endPoint[0],\n            clientY: endPoint[1],\n            cancelable: true,\n            bubbles: true,\n        });\n        const mouseup = new MouseEvent(\"mousemove\", {\n            clientX: endPoint[0],\n            clientY: endPoint[1],\n            cancelable: true,\n            bubbles: true,\n        });\n        const gesto = this.gesto;\n        const result = gesto.onDragStart(mousedown);\n\n        if (result !== false) {\n            gesto.onDrag(mousemove);\n            gesto.onDragEnd(mouseup);\n        }\n    }\n    /**\n     * You can get the currently selected targets.\n     */\n    public getSelectedTargets(): Array<HTMLElement | SVGElement> {\n        return this.selectedTargets;\n    }\n    /**\n     * `OnDragStart` is triggered by an external event.\n     * @param - external event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto();\n     *\n     * window.addEventListener(\"mousedown\", e => {\n     *   selecto.triggerDragStart(e);\n     * });\n     */\n    public triggerDragStart(e: MouseEvent | TouchEvent) {\n        this.gesto.triggerDragStart(e);\n        return this;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.gesto.unset();\n        this.injectResult.destroy();\n        this.dragScroll.dragEnd();\n        removeEvent(document, \"selectstart\", this._onDocumentSelectStart);\n\n        if (!this.options.portalContainer) {\n            this.target.parentElement?.removeChild(this.target);\n        }\n\n\n        this.keycon = null;\n        this.gesto = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n    public getElementPoints(target: HTMLElement | SVGElement) {\n        const getElementRect = this.getElementRect || getDefaultElementRect;\n        const info = getElementRect(target);\n        const points = [info.pos1, info.pos2, info.pos4, info.pos3];\n\n        if (getElementRect !== getDefaultElementRect) {\n            const rect = target.getBoundingClientRect();\n\n            return fitPoints(points, rect);\n        }\n        return points;\n    }\n    /**\n     * Get all elements set in `selectableTargets`.\n     */\n    public getSelectableElements() {\n        const selectableElements: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach((target) => {\n            if (isFunction(target)) {\n                const result = target();\n\n                if (result) {\n                    selectableElements.push(...[].slice.call(result));\n                }\n            } else if (target instanceof Node) {\n                selectableElements.push(target);\n            } else if (isObject(target)) {\n                selectableElements.push(target.value || target.current);\n            } else {\n                const elements = [].slice.call(\n                    document.querySelectorAll(target)\n                );\n\n                selectableElements.push(...elements);\n            }\n        });\n\n        return selectableElements;\n    }\n    /**\n     * If scroll occurs during dragging, you can manually call this method to check the position again.\n     */\n    public checkScroll() {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        const scrollOptions = this.scrollOptions;\n        const innerScrollOptions = this.gesto.getEventData().innerScrollOptions;\n        const hasScrollOptions = innerScrollOptions || scrollOptions?.container;\n\n        // If it is a scrolling position, pass drag\n        if (hasScrollOptions) {\n            this.dragScroll.checkScroll({\n                inputEvent: this.gesto.getCurrentEvent(),\n                ...(innerScrollOptions || scrollOptions),\n            });\n        }\n    }\n    /**\n     * Find for selectableTargets again during drag event\n     * You can update selectable targets during an event.\n     */\n    public findSelectableTargets(data: any = this.gesto.getEventData()): Array<HTMLElement | SVGElement> {\n        const selectableTargets = this.getSelectableElements();\n        const selectablePoints = selectableTargets.map(\n            (target) => this.getElementPoints(target),\n        );\n\n        data.selectableTargets = selectableTargets;\n        data.selectablePoints = selectablePoints;\n        data.selectableParentMap = null;\n\n        const options = this.options;\n        const hasIndexesMap = options.checkOverflow || options.innerScrollOptions;\n\n        if (hasIndexesMap) {\n            const parentMap = new Map<Element, InnerParentInfo>();\n\n            data.selectableInnerScrollParentMap = parentMap;\n            data.selectableInnerScrollPathsList = selectableTargets.map((target, index) => {\n                let parentElement = target.parentElement;\n\n                let parents: Element[] = [];\n                const paths: Element[] = [];\n\n                while (parentElement && parentElement !== document.body) {\n                    let info: InnerParentInfo = parentMap.get(parentElement);\n\n                    if (!info) {\n                        const overflow = getComputedStyle(parentElement).overflow !== \"visible\";\n\n                        if (overflow) {\n                            const rect = getDefaultElementRect(parentElement);\n\n                            info = {\n                                parentElement,\n                                indexes: [],\n                                points: [rect.pos1, rect.pos2, rect.pos4, rect.pos3],\n                                paths: [...paths],\n                            };\n\n                            parents.push(parentElement);\n                            parents.forEach(prevParentElement => {\n                                parentMap.set(prevParentElement, info);\n                            });\n                            parents = [];\n                        }\n                    }\n                    if (info) {\n                        parentElement = info.parentElement;\n\n                        parentMap.get(parentElement).indexes.push(index);\n                        paths.push(parentElement);\n                    } else {\n                        parents.push(parentElement);\n                    }\n                    parentElement = parentElement.parentElement;\n                }\n\n                return paths;\n            });\n        }\n\n        if (!options.checkOverflow) {\n            data.selectableInners = selectableTargets.map(() => true);\n        }\n\n        this._refreshGroups(data);\n\n        return selectableTargets;\n    }\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    public clickTarget(\n        e: MouseEvent | TouchEvent,\n        clickedTarget?: Element\n    ): this {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent = {\n            data: {\n                selectFlag: false,\n            },\n            clientX,\n            clientY,\n            inputEvent: e,\n            isClick: true,\n            isTrusted: false,\n            stop: () => {\n                return false;\n            },\n        } as any;\n        if (this._onDragStart(dragEvent, clickedTarget)) {\n            this._onDragEnd(dragEvent);\n        }\n        return this;\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect, toggleContinueSelectWithoutDeselect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect || toggleContinueSelectWithoutDeselect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon\n                .keydown(this._onKeyDown)\n                .keyup(this._onKeyUp)\n                .on(\"blur\", this._onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect, toggleContinueSelectWithoutDeselect } = this.options;\n        if ((!toggleContinueSelect && !toggleContinueSelectWithoutDeselect) || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    // with getter, setter property\n    private setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    private getContinueSelect() {\n        const {\n            continueSelect,\n            toggleContinueSelect,\n        } = this.options;\n\n        if (!toggleContinueSelect || !this._keydownContinueSelect) {\n            return continueSelect;\n        }\n        return !continueSelect;\n    }\n    private getContinueSelectWithoutDeselect() {\n        const {\n            continueSelectWithoutDeselect,\n            toggleContinueSelectWithoutDeselect,\n        } = this.options;\n\n        if (!toggleContinueSelectWithoutDeselect || !this._keydownContinueSelectWithoutDeselection) {\n            return continueSelectWithoutDeselect;\n        }\n        return !continueSelectWithoutDeselect;\n    }\n    private setToggleContinueSelect(\n        toggleContinueSelect: string[][] | string[] | string\n    ) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n    private setToggleContinueSelectWithoutDeselect(\n        toggleContinueSelectWithoutDeselect: string[][] | string[] | string\n    ) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelectWithoutDeselect, toggleContinueSelectWithoutDeselect, () => {\n            options.toggleContinueSelectWithoutDeselect = toggleContinueSelectWithoutDeselect;\n\n            this.setKeyEvent();\n        });\n    }\n    private setPreventDefault(value: boolean) {\n        this.gesto.options.preventDefault = value;\n    }\n    private setCheckInput(value: boolean) {\n        this.gesto.options.checkInput = value;\n    }\n    private initElement() {\n        this.target = createElement(\n            (<div className={CLASS_NAME}></div>) as any,\n            this.target,\n            this.container\n        );\n\n        const target = this.target;\n\n        const {\n            dragContainer,\n            checkInput,\n            preventDefault,\n            preventClickEventOnDragStart,\n            preventClickEventOnDrag,\n            preventClickEventByCondition,\n            preventRightClick = true,\n        } = this.options;\n        this.dragContainer =\n            typeof dragContainer === \"string\"\n                ? [].slice.call(document.querySelectorAll(dragContainer))\n                : dragContainer || (this.target.parentNode as any);\n        this.gesto = new Gesto(this.dragContainer, {\n            checkWindowBlur: true,\n            container: window,\n            checkInput,\n            preventDefault,\n            preventClickEventOnDragStart,\n            preventClickEventOnDrag,\n            preventClickEventByCondition,\n            preventRightClick,\n        }).on({\n            dragStart: this._onDragStart,\n            drag: this._onDrag,\n            dragEnd: this._onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this._onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target, {\n            nonce: this.options.cspNonce,\n        });\n    }\n    private hitTest(\n        selectRect: Rect,\n        data: any,\n        gestoEvent?: any,\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n        const innerGroups: Record<string | number, Record<string | number, number[]>> = data.innerGroups;\n        const innerWidth = data.innerWidth;\n        const innerHeight = data.innerHeight;\n        const clientX = gestoEvent?.clientX;\n        const clientY = gestoEvent?.clientY;\n        const ignoreClick = data.ignoreClick;\n        const rectPoints = [\n            [left, top],\n            [right, top],\n            [right, bottom],\n            [left, bottom],\n        ];\n        const hitRateValue = splitUnit(`${hitRate}`);\n\n        const isHit = (points: number[][], el: Element) => {\n            const inArea = ignoreClick ? false : isInside([clientX, clientY], points);\n\n            if (selectByClick && inArea) {\n                return true;\n            }\n            const overlapPoints = getOverlapPoints(rectPoints, points);\n\n            if (!overlapPoints.length) {\n                return false;\n            }\n            let overlapSize = getAreaSize(overlapPoints);\n\n            // Line\n            let targetSize = 0;\n\n            if (overlapSize === 0 && getAreaSize(points) === 0) {\n                targetSize = getLineSize(points);\n                overlapSize = getLineSize(overlapPoints);\n            } else {\n                targetSize = getAreaSize(points);\n            }\n\n\n            if (hitRateValue.unit === \"px\") {\n                return overlapSize >= hitRateValue.value;\n            } else {\n                const rate = between(\n                    Math.round((overlapSize / targetSize) * 100),\n                    0,\n                    100\n                );\n\n                return rate >= Math.min(100, hitRateValue.value);\n            }\n        };\n        const selectableTargets: Array<HTMLElement | SVGElement> = data.selectableTargets;\n        const selectablePoints: number[][][] = data.selectablePoints;\n        const selectableInners: boolean[] = data.selectableInners;\n\n        if (!innerGroups) {\n            return selectableTargets.filter((_, i) => {\n                if (!selectableInners[i]) {\n                    return false;\n                }\n                return isHit(selectablePoints[i], selectableTargets[i]);\n            });\n        }\n        let selectedTargets: Array<HTMLElement | SVGElement> = [];\n        const minX = Math.floor(left / innerWidth);\n        const maxX = Math.floor(right / innerWidth);\n        const minY = Math.floor(top / innerHeight);\n        const maxY = Math.floor(bottom / innerHeight);\n\n        for (let x = minX; x <= maxX; ++x) {\n            const yGroups = innerGroups[x];\n\n            if (!yGroups) {\n                continue;\n            }\n            for (let y = minY; y <= maxY; ++y) {\n                const group = yGroups[y];\n\n                if (!group) {\n                    continue;\n                }\n                group.forEach(index => {\n                    const points = selectablePoints[index];\n                    const inner = selectableInners[index];\n                    const target = selectableTargets[index];\n\n                    if (inner && isHit(points, target)) {\n                        selectedTargets.push(target);\n                    }\n                });\n            }\n        }\n        return filterDuplicated(selectedTargets);\n    }\n    private initDragScroll() {\n        this.dragScroll\n            .on(\"scrollDrag\", ({ next }) => {\n                next(this.gesto.getCurrentEvent());\n            })\n            .on(\"scroll\", ({ container, direction }) => {\n                const innerScrollOptions = this.gesto.getEventData().innerScrollOptions;\n\n                if (innerScrollOptions) {\n                    this.emit(\"innerScroll\", {\n                        container,\n                        direction,\n                    });\n                } else {\n                    this.emit(\"scroll\", {\n                        container,\n                        direction,\n                    });\n                }\n            })\n            .on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n                const gesto = this.gesto;\n\n                if (!gesto || !gesto.isFlag()) {\n                    return;\n                }\n\n                const data = this.gesto.getEventData();\n                const boundArea = data.boundArea;\n\n                data.startX -= offsetX;\n                data.startY -= offsetY;\n\n                const innerScrollOptions = this.gesto.getEventData().innerScrollOptions;\n                const container = innerScrollOptions?.container;\n                let isMoveInnerScroll = false;\n\n                if (container) {\n                    const parentMap: Map<Element, InnerParentInfo> = data.selectableInnerScrollParentMap;\n                    const parentInfo = parentMap.get(container);\n\n                    if (parentInfo) {\n                        parentInfo.paths.forEach(scrollContainer => {\n                            const containerInfo = parentMap.get(scrollContainer);\n\n                            containerInfo.points.forEach(pos => {\n                                pos[0] -= offsetX;\n                                pos[1] -= offsetY;\n                            });\n                        });\n                        parentInfo.indexes.forEach(index => {\n                            data.selectablePoints[index].forEach((pos) => {\n                                pos[0] -= offsetX;\n                                pos[1] -= offsetY;\n                            });\n                        });\n                        isMoveInnerScroll = true;\n                    }\n                }\n                if (!isMoveInnerScroll) {\n                    data.selectablePoints.forEach((points: number[][]) => {\n                        points.forEach((pos) => {\n                            pos[0] -= offsetX;\n                            pos[1] -= offsetY;\n                        });\n                    });\n                }\n                this._refreshGroups(data);\n\n                boundArea.left -= offsetX;\n                boundArea.right -= offsetX;\n                boundArea.top -= offsetY;\n                boundArea.bottom -= offsetY;\n\n                this.gesto.scrollBy(\n                    offsetX,\n                    offsetY,\n                    inputEvent.inputEvent,\n                    // false\n                );\n                this._checkSelected(this.gesto.getCurrentEvent());\n            });\n    }\n    private _select(\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        e: OnDragEvent,\n        isStart?: boolean\n    ) {\n        const inputEvent = e.inputEvent;\n        const data = e.data;\n        const result = this.setSelectedTargets(selectedTargets);\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.emit(\"selectStart\", {\n                ...result,\n                rect,\n                inputEvent,\n                data: data.data,\n                isTrusted: e.isTrusted,\n            });\n        }\n        if (result.added.length || result.removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.emit(\"select\", {\n                ...result,\n                rect,\n                inputEvent,\n                data: data.data,\n                isTrusted: e.isTrusted,\n            });\n        }\n    }\n    private _selectEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        startPassedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        e: OnDragEvent,\n    ) {\n        const { inputEvent, isDouble, data } = e;\n        const { added, removed, prevList, list } = diff(\n            startSelectedTargets,\n            this.selectedTargets\n        );\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(startPassedTargets, this.selectedTargets);\n        const type = inputEvent && inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"selectEnd\", {\n            startSelected: startSelectedTargets,\n            beforeSelected: startPassedTargets,\n            selected: this.selectedTargets,\n            added: added.map((index) => list[index]),\n            removed: removed.map((index) => prevList[index]),\n            afterAdded: afterAdded.map((index) => afterList[index]),\n            afterRemoved: afterRemoved.map((index) => afterPrevList[index]),\n            isDragStart,\n            isClick: !!e.isClick,\n            isDouble: !!isDouble,\n            rect,\n            inputEvent,\n            data: data.data,\n            isTrusted: e.isTrusted,\n        });\n    }\n    private _onDragStart = (e: OnDragStart, clickedTarget?: Element) => {\n        const { data, clientX, clientY, inputEvent } = e;\n        const {\n            selectFromInside,\n            selectByClick,\n            rootContainer,\n            boundContainer,\n            preventDragFromInside = true,\n            clickBySelectEnd,\n            dragCondition,\n        } = this.options;\n\n        if (dragCondition && !dragCondition(e)) {\n            e.stop();\n            return;\n        }\n        data.data = {};\n        data.innerWidth = window.innerWidth;\n        data.innerHeight = window.innerHeight;\n        this.findSelectableTargets(data);\n        data.startSelectedTargets = this.selectedTargets;\n        data.scaleMatrix = createMatrix();\n        data.containerX = 0;\n        data.containerY = 0;\n\n\n        let boundArea = {\n            left: -Infinity,\n            top: -Infinity,\n            right: Infinity,\n            bottom: Infinity,\n        };\n        if (rootContainer) {\n            const containerRect = this.container.getBoundingClientRect();\n\n            data.containerX = containerRect.left;\n            data.containerY = containerRect.top;\n            data.scaleMatrix = getDistElementMatrix(this.container, rootContainer);\n        }\n\n        if (boundContainer) {\n            const boundInfo: Required<BoundContainer> =\n                isObject(boundContainer) && \"element\" in boundContainer\n                    ? {\n                        left: true,\n                        top: true,\n                        bottom: true,\n                        right: true,\n                        ...boundContainer,\n                    }\n                    : {\n                        element: boundContainer,\n                        left: true,\n                        top: true,\n                        bottom: true,\n                        right: true,\n                    };\n            const boundElement = boundInfo.element;\n            let rectElement: HTMLElement;\n\n            if (boundElement) {\n                if (isString(boundElement)) {\n                    rectElement = document.querySelector(boundElement);\n                } else if (boundElement === true) {\n                    rectElement = this.container;\n                } else {\n                    rectElement = boundElement;\n                }\n                const rect = rectElement.getBoundingClientRect();\n\n                if (boundInfo.left) {\n                    boundArea.left = rect.left;\n                }\n                if (boundInfo.top) {\n                    boundArea.top = rect.top;\n                }\n                if (boundInfo.right) {\n                    boundArea.right = rect.right;\n                }\n                if (boundInfo.bottom) {\n                    boundArea.bottom = rect.bottom;\n                }\n            }\n        }\n\n        data.boundArea = boundArea;\n\n        const hitRect = {\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n            width: 0,\n            height: 0,\n        };\n        let firstPassedTargets: Array<HTMLElement | SVGElement> = [];\n\n        if (!selectFromInside || (selectByClick && !clickBySelectEnd)) {\n            const pointTarget = this._findElement(\n                clickedTarget || inputEvent.target, // elementFromPoint(clientX, clientY),\n                data.selectableTargets,\n            );\n            firstPassedTargets = pointTarget ? [pointTarget] : [];\n        }\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        const isPreventSelect = !selectFromInside && hasInsideTargets;\n\n        // prevent drag from inside when selectByClick is false\n        if (isPreventSelect && !selectByClick) {\n            e.stop();\n            return false;\n        }\n\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts (triggers on mousedown or touchstart), the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result =\n            !(e as any).isClick && isTrusted\n                ? this.emit(\"dragStart\", { ...e, data: data.data })\n                : true;\n\n        if (!result) {\n            e.stop();\n            return false;\n        }\n\n        if (this.continueSelect) {\n            firstPassedTargets = passTargets(\n                this.selectedTargets,\n                firstPassedTargets,\n                this.continueSelectWithoutDeselect,\n            );\n            data.startPassedTargets = this.selectedTargets;\n        } else {\n            data.startPassedTargets = [];\n        }\n        this._select(\n            firstPassedTargets,\n            hitRect,\n            e,\n            true\n        );\n        data.startX = clientX;\n        data.startY = clientY;\n        data.selectFlag = false;\n        data.preventDragFromInside = false;\n\n        if (inputEvent.target) {\n            const offsetPos = calculateMatrixDist(data.scaleMatrix, [\n                clientX - data.containerX,\n                clientY - data.containerY,\n            ]);\n            this.target.style.cssText += `position: ${rootContainer ? \"absolute\" : \"fixed\"};`\n                + `left:0px;top:0px;`\n                + `transform: translate(${offsetPos[0]}px, ${offsetPos[1]}px)`;\n        }\n\n        if (isPreventSelect && selectByClick && !clickBySelectEnd) {\n            inputEvent.preventDefault();\n\n            // prevent drag from inside when selectByClick is true and force call `selectEnd`\n            if (preventDragFromInside) {\n                this._selectEnd(\n                    data.startSelectedTargets,\n                    data.startPassedTargets,\n                    hitRect,\n                    e\n                );\n                data.preventDragFromInside = true;\n            }\n        } else {\n            data.selectFlag = true;\n            // why?\n            // if (type === \"touchstart\") {\n            //     inputEvent.preventDefault();\n            // }\n            const { scrollOptions, innerScrollOptions } = this.options;\n\n            let isInnerScroll = false\n\n            if (innerScrollOptions) {\n                const inputEvent = e.inputEvent;\n                const target = inputEvent.target;\n\n                let innerScrollElement: HTMLElement | null = null;\n                let parentElement = target;\n\n                while (parentElement && parentElement !== document.body) {\n\n                    const overflow = getComputedStyle(parentElement).overflow !== \"visible\";\n\n                    if (overflow) {\n                        innerScrollElement = parentElement;\n                        break;\n                    }\n                    parentElement = parentElement.parentElement;\n                }\n                if (innerScrollElement) {\n                    data.innerScrollOptions = {\n                        container: innerScrollElement,\n                        checkScrollEvent: true,\n                        ...(innerScrollOptions === true ? {} : innerScrollOptions),\n                    };\n                    this.dragScroll.dragStart(e, data.innerScrollOptions);\n\n                    isInnerScroll = true;\n                }\n            }\n            if (!isInnerScroll && scrollOptions && scrollOptions.container) {\n                this.dragScroll.dragStart(e, scrollOptions);\n            }\n            if (clickBySelectEnd) {\n                data.selectFlag = false;\n                e.preventDrag();\n            }\n        }\n        return true;\n    };\n    private _checkSelected(e: any, rect = getRect(e, this.options.ratio)) {\n        const { data } = e;\n        const { top, left, width, height } = rect;\n        const selectFlag = data.selectFlag;\n        const {\n            containerX,\n            containerY,\n            scaleMatrix,\n        } = data;\n        const offsetPos = calculateMatrixDist(scaleMatrix, [\n            left - containerX,\n            top - containerY,\n        ]);\n        const offsetSize = calculateMatrixDist(scaleMatrix, [\n            width,\n            height,\n        ]);\n        let selectedTargets: Array<HTMLElement | SVGElement> = [];\n        if (selectFlag) {\n            this.target.style.cssText +=\n                `display: block;` +\n                `left:0px;top:0px;` +\n                `transform: translate(${offsetPos[0]}px, ${offsetPos[1]}px);` +\n                `width:${offsetSize[0]}px;height:${offsetSize[1]}px;`;\n\n            const passedTargets = this.hitTest(\n                rect,\n                data,\n                e,\n            );\n            selectedTargets = passTargets(\n                data.startPassedTargets,\n                passedTargets,\n                this.continueSelect && this.continueSelectWithoutDeselect,\n            );\n        }\n        /**\n         * When the drag, the drag event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event drag\n         * @param {OnDrag} - Parameters for the drag event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"drag\", e => {\n         *   e.stop();\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result = this.emit(\"drag\", {\n            ...e,\n            data: data.data,\n            isSelect: selectFlag,\n            rect,\n        });\n        if (result === false) {\n            this.target.style.cssText += \"display: none;\";\n            e.stop();\n            return;\n        }\n\n        if (selectFlag) {\n            this._select(selectedTargets, rect, e);\n        }\n    }\n    private _onDrag = (e: OnDrag) => {\n        if (e.data.selectFlag) {\n            const scrollOptions = this.scrollOptions;\n            const innerScrollOptions = e.data.innerScrollOptions;\n            const hasScrollOptions = innerScrollOptions || scrollOptions?.container;\n\n            // If it is a scrolling position, pass drag\n            if (hasScrollOptions && !e.isScroll && this.dragScroll.drag(e, innerScrollOptions || scrollOptions)) {\n                return;\n            }\n        }\n        this._checkSelected(e);\n    };\n    private _onDragEnd = (e: OnDragEvent) => {\n        const { data, inputEvent } = e;\n        const rect = getRect(e, this.options.ratio);\n        const selectFlag = data.selectFlag;\n\n        /**\n         * When the drag ends (triggers on mouseup or touchend after drag), the dragEnd event is called.\n         * @memberof Selecto\n         * @event dragEnd\n         * @param {OnDragEnd} - Parameters for the dragEnd event\n         */\n        if (inputEvent) {\n            this.emit(\"dragEnd\", {\n                isDouble: !!e.isDouble,\n                isClick: !!e.isClick,\n                isDrag: false,\n                isSelect: selectFlag,\n                ...e,\n                data: data.data,\n                rect,\n            });\n        }\n        this.target.style.cssText += \"display: none;\";\n\n        if (selectFlag) {\n            data.selectFlag = false;\n            this.dragScroll.dragEnd();\n        } else if (this.selectByClick && this.clickBySelectEnd) {\n            // only clickBySelectEnd\n            const pointTarget = this._findElement(\n                inputEvent?.target || elementFromPoint(e.clientX, e.clientY),\n                data.selectableTargets,\n            );\n            this._select(pointTarget ? [pointTarget] : [], rect, e);\n        }\n        if (!data.preventDragFromInside) {\n            this._selectEnd(\n                data.startSelectedTargets,\n                data.startPassedTargets,\n                rect,\n                e\n            );\n        }\n    };\n    private _sameCombiKey(e: any, keys: string | string[] | string[][], isKeyup?: boolean) {\n        if (!keys) {\n            return false;\n        }\n        const combi = getCombi(e.inputEvent, e.key);\n        const nextKeys = [].concat(keys);\n        const toggleKeys = isArray(nextKeys[0]) ? nextKeys : [nextKeys];\n\n        if (isKeyup) {\n            const singleKey = e.key;\n\n            return toggleKeys.some((keys) =>\n                keys.some((key) => key === singleKey)\n            );\n        }\n        return toggleKeys.some((keys) =>\n            keys.every((key) => combi.indexOf(key) > -1)\n        );\n    }\n    private _onKeyDown = (e: any) => {\n        const options = this.options;\n        let isKeyDown = false;\n\n        if (!this._keydownContinueSelect) {\n            const result = this._sameCombiKey(e, options.toggleContinueSelect);\n\n            this._keydownContinueSelect = result;\n            isKeyDown ||= result;\n        }\n        if (!this._keydownContinueSelectWithoutDeselection) {\n            const result = this._sameCombiKey(e, options.toggleContinueSelectWithoutDeselect);\n\n            this._keydownContinueSelectWithoutDeselection = result;\n            isKeyDown ||= result;\n        }\n        if (!isKeyDown) {\n            return;\n        }\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"keydown\", {\n            keydownContinueSelect: this._keydownContinueSelect,\n            keydownContinueSelectWithoutDeselection: this._keydownContinueSelectWithoutDeselection,\n        });\n    };\n    private _onKeyUp = (e: any) => {\n        const options = this.options;\n        let isKeyUp = false;\n\n        if (this._keydownContinueSelect) {\n            const result = this._sameCombiKey(e, options.toggleContinueSelect, true);\n            this._keydownContinueSelect = !result;\n\n            isKeyUp ||= result;\n        }\n        if (this._keydownContinueSelectWithoutDeselection) {\n            const result = this._sameCombiKey(e, options.toggleContinueSelectWithoutDeselect, true);\n            this._keydownContinueSelectWithoutDeselection = !result;\n\n            isKeyUp ||= result;\n        }\n        if (!isKeyUp) {\n            return;\n        }\n\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"keyup\", {\n            keydownContinueSelect: this._keydownContinueSelect,\n            keydownContinueSelectWithoutDeselection: this._keydownContinueSelectWithoutDeselection,\n        });\n    };\n    private _onBlur = () => {\n        if (this._keydownContinueSelect || this._keydownContinueSelectWithoutDeselection) {\n            this._keydownContinueSelect = false;\n            this._keydownContinueSelectWithoutDeselection = false;\n            this.emit(\"keyup\", {\n                keydownContinueSelect: this._keydownContinueSelect,\n                keydownContinueSelectWithoutDeselection: this._keydownContinueSelectWithoutDeselection,\n            });\n        }\n    };\n    private _onDocumentSelectStart = (e: any) => {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        const containers =\n            dragContainer instanceof Element\n                ? [dragContainer]\n                : ([].slice.call(dragContainer) as Element[]);\n        const target = e.target;\n\n        containers.some((container) => {\n            if (container === target || container.contains(target)) {\n                e.preventDefault();\n                return true;\n            }\n        });\n    };\n    private _findElement(clickedTarget: Element | null, selectableTargets: Array<Element>): HTMLElement | SVGElement {\n        let pointTarget = clickedTarget;\n\n        while (pointTarget) {\n            if (selectableTargets.indexOf(pointTarget) > -1) {\n                break;\n            }\n            pointTarget = pointTarget.parentElement;\n        }\n        return pointTarget as any;\n    }\n    private _refreshGroups(data: any) {\n        const innerWidth = data.innerWidth;\n        const innerHeight = data.innerHeight;\n        const selectablePoints: number[][][] = data.selectablePoints;\n\n        if (this.options.checkOverflow) {\n            const innerScrollContainer = this.gesto.getEventData().innerScrollOptions?.container;\n            const parentMap: Map<Element, InnerParentInfo> = data.selectableInnerScrollParentMap;\n            const innerScrollPathsList: Element[][] = data.selectableInnerScrollPathsList;\n\n            data.selectableInners = innerScrollPathsList.map((innerScrollPaths, i) => {\n                let isAlwaysTrue = false;\n                return innerScrollPaths.every(target => {\n                    if (isAlwaysTrue) {\n                        return true;\n                    }\n                    if (target === innerScrollContainer) {\n                        isAlwaysTrue = true;\n                        return true;\n                    }\n\n                    const rect = parentMap.get(target);\n\n                    if (rect) {\n                        const points1 = selectablePoints[i];\n                        const points2 = rect.points;\n                        const overlapPoints = getOverlapPoints(points1, points2);\n\n                        if (!overlapPoints.length) {\n                            return false;\n                        }\n                    }\n                    return true;\n                });\n            });\n        }\n        if (!innerWidth || !innerHeight) {\n            data.innerGroups = null;\n        } else {\n            const selectablePoints: number[][][] = data.selectablePoints;\n\n            const groups: Record<string | number, Record<string | number, number[]>> = {};\n\n            selectablePoints.forEach((points, i) => {\n                let minX = Infinity;\n                let maxX = -Infinity;\n                let minY = Infinity;\n                let maxY = -Infinity;\n\n                points.forEach(pos => {\n                    const x = Math.floor(pos[0] / innerWidth);\n                    const y = Math.floor(pos[1] / innerHeight);\n\n                    minX = Math.min(x, minX);\n                    maxX = Math.max(x, maxX);\n                    minY = Math.min(y, minY);\n                    maxY = Math.max(y, maxY);\n                });\n\n                for (let x = minX; x <= maxX; ++x) {\n                    for (let y = minY; y <= maxY; ++y) {\n                        groups[x] = groups[x] || {};\n                        groups[x][y] = groups[x][y] || [];\n\n                        groups[x][y].push(i);\n                    }\n                }\n            });\n\n            data.innerGroups = groups;\n        }\n    }\n}\n\ninterface Selecto extends SelectoProperties { }\n\nexport default Selecto;\n"],"names":["createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","document","name","setAttribute","elChildren","forEach","child","i","split","elStyle","appendChild","h","attrs","_i","_a","_b","_c","diffValue","prev","cur","func","getRect","e","ratio","boundArea","data","distX","distY","_d","startX","startY","nextHeight","Math","sqrt","width","calculateBoundSize","abs","left","right","top","bottom","height","min","getDefaultElementRect","rect","getBoundingClientRect","pos1","pos2","pos3","pos4","passTargets","beforeTargets","afterTargets","continueSelectWithoutDeselect","diff","list","prevList","added","removed","maintained","map","index","nextIndex","getLineSize","points","size","length","max","getDist","injector","CLASS_NAME","PROPERTIES","OPTIONS","__spreadArray","OPTION_TYPES","boundContainer","portalContainer","dragContainer","selectableTargets","Array","selectByClick","Boolean","selectFromInside","continueSelect","toggleContinueSelect","toggleContinueSelectWithoutDeselect","keyContainer","hitRate","Number","scrollOptions","Object","checkInput","preventDefault","cspNonce","String","getElementRect","Function","preventDragFromInside","rootContainer","dragCondition","clickBySelectEnd","preventClickEventOnDragStart","preventClickEventOnDrag","checkOverflow","innerScrollOptions","__extends","options","_super","_this","DragScroll","clickedTarget","clientX","clientY","inputEvent","innerWidth","window","innerHeight","findSelectableTargets","startSelectedTargets","selectedTargets","scaleMatrix","createMatrix","containerX","Infinity","containerY","hitRect","containerRect","getDistElementMatrix","boundElement","boundInfo","isObject","element","isString","querySelector","firstPassedTargets","hasInsideTargets","pointTarget","_findElement","target","isPreventSelect","stop","type","isClick","emit","startPassedTargets","_select","selectFlag","offsetPos","calculateMatrixDist","cssText","_selectEnd","isInnerScroll","innerScrollElement","parentElement","body","getComputedStyle","overflow","checkScrollEvent","dragScroll","dragStart","preventDrag","isScroll","drag","_checkSelected","isDouble","isDrag","isSelect","dragEnd","elementFromPoint","result","isKeyDown","_keydownContinueSelect","_sameCombiKey","_keydownContinueSelectWithoutDeselection","keydownContinueSelect","keydownContinueSelectWithoutDeselection","isKeyUp","containers","gesto","isFlag","documentElement","Element","slice","call","some","contains","undefined","initElement","initDragScroll","setKeyController","__proto","beforeSelected","this","selected","point1","point2","ignoreClick","selectedElements","hitTest","setSelectedTargets","startPoint","endPoint","mousedown","MouseEvent","cancelable","bubbles","mousemove","mouseup","onDragStart","onDrag","onDragEnd","triggerDragStart","off","keycon","destroy","unset","injectResult","removeEvent","_onDocumentSelectStart","removeChild","info","selectableElements","elements","isFunction","push","Node","value","current","querySelectorAll","getEventData","checkScroll","getCurrentEvent","parentMap_1","getSelectableElements","selectablePoints","getElementPoints","selectableParentMap","Map","selectableInnerScrollParentMap","selectableInnerScrollPathsList","parents","paths","get","indexes","prevParentElement","set","selectableInners","_refreshGroups","touch","touches","changedTouches","dragEvent","isTrusted","_onDragStart","_onDragEnd","KeyController","keydown","_onKeyDown","keyup","_onKeyUp","on","_onBlur","setKeyEvent","preventClickEventByCondition","preventRightClick","parentNode","Gesto","checkWindowBlur","_onDrag","addEvent","inject","nonce","selectRect","gestoEvent","isHit","inArea","isInside","overlapPoints","getOverlapPoints","rectPoints","overlapSize","getAreaSize","targetSize","hitRateValue","unit","between","round","innerGroups","splitUnit","filter","_","minX","floor","maxX","minY","maxY","x","yGroups","y","group","inner","filterDuplicated","arr","indexOf","has","next","direction","isMoveInnerScroll","parentMap_2","parentInfo","offsetX","offsetY","scrollContainer","pos","scrollBy","isStart","afterAdded","afterRemoved","afterPrevList","afterList","isDragStart","startSelected","offsetSize","passedTargets","keys","isKeyup","singleKey_1","combi","getCombi","key","nextKeys","concat","toggleKeys","isArray","every","innerScrollContainer_1","parentMap_3","selectablePoints_1","groups_1","innerScrollPathsList","innerScrollPaths","isAlwaysTrue","prototype","property","enumerable","configurable","getter","camelize","setter","defineProperty","Selecto","EventEmitter","modules"],"mappings":"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"}