{"version":3,"file":"selecto.cjs.js","sources":["../src/utils.ts","../src/consts.ts","../src/SelectoManager.tsx","../src/Selecto.tsx","../src/index.umd.ts"],"sourcesContent":["import { Hypertext, Rect } from \"./types\";\nimport { IObject, addClass, hasClass, calculateBoundSize } from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport { getMinMaxs } from \"overlap-area\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0] || e.changedTouches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\n\nexport function elementFromPoint(clientX: number, clientY: number): HTMLElement | SVGElement | null {\n    return (document.elementFromPoint && document.elementFromPoint(clientX, clientY)) as any || null;\n}\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\nexport function isFastInside(point: number[], points: number[][]) {\n    const { minX, minY, maxX, maxY } = getMinMaxs(points);\n    const [x, y] = point;\n\n    return minX <= x && x <= maxX && minY <= y && y <= maxY;\n}\nexport function getFastOverlapPoints(points1: number[][], points2: number[][]) {\n    const {\n        minX: minX1,\n        minY: minY1,\n        maxX: maxX1,\n        maxY: maxY1,\n    } = getMinMaxs(points1);\n    const {\n        minX: minX2,\n        minY: minY2,\n        maxX: maxX2,\n        maxY: maxY2,\n    } = getMinMaxs(points2);\n\n    if (maxX2 < minX1 || maxX1 < minX2 || maxY2 < minY1 || maxY1 < minY2) {\n        return [];\n    }\n    const width = Math.min(maxX2 - minX1, maxX1 - minX2);\n    const height = Math.min(maxY2 - minY1, maxY1 - minY2);\n\n    return [\n        [0, 0],\n        [width, 0],\n        [width, height],\n        [0, height],\n    ];\n}\nexport function getRect(\n    e: any, ratio: number,\n    boundArea = e.datas.boundArea,\n): Rect {\n    let {\n        distX = 0,\n        distY = 0,\n    } = e;\n    const { startX, startY } = e.datas;\n\n    if (ratio > 0) {\n        const nextHeight = Math.sqrt((distX * distX + distY * distY) / (1 + ratio * ratio));\n        const nextWidth = ratio * nextHeight;\n\n        distX = (distX >= 0 ? 1 : -1) * nextWidth;\n        distY = (distY >= 0 ? 1 : -1) * nextHeight;\n    }\n    let width = Math.abs(distX);\n    let height = Math.abs(distY);\n\n    const maxWidth = distX < 0 ? startX - boundArea.left : boundArea.right - startX;\n    const maxHeight = distY < 0 ? startY - boundArea.top : boundArea.bottom - startY;\n\n    [width, height] = calculateBoundSize([width, height], [0, 0], [maxWidth, maxHeight], !!ratio);\n    distX = (distX >= 0 ? 1 : -1) * width;\n    distY = (distY >= 0 ? 1 : -1) * height;\n\n    const tx = Math.min(0, distX);\n    const ty = Math.min(0, distY);\n    const left = startX + tx;\n    const top = startY + ty;\n\n    return {\n        left,\n        top,\n        right: left + width,\n        bottom: top + height,\n        width,\n        height,\n    };\n}\n\nexport function getDefaultElementRect(el: HTMLElement | SVGElement) {\n    const rect = el.getBoundingClientRect();\n    const { left, top, width, height } = rect;\n\n    return {\n        pos1: [left, top],\n        pos2: [left + width, top],\n        pos3: [left, top + height],\n        pos4: [left + width, top + height],\n    };\n}\n\nexport function passTargets(\n    beforeTargets: Array<HTMLElement | SVGElement>,\n    afterTargets: Array<HTMLElement | SVGElement>,\n    continueSelectWithoutDeselect: boolean,\n) {\n    const {\n        list,\n        prevList,\n        added,\n        removed,\n        maintained,\n    } = diff(beforeTargets, afterTargets);\n\n    return [\n        ...added.map(index => list[index]),\n        ...removed.map(index => prevList[index]),\n        ...continueSelectWithoutDeselect ? maintained.map(([, nextIndex]) => list[nextIndex]) : [],\n    ];\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    pointer-events: none;\n    will-change: transform;\n    z-index: 100;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\nexport const PROPERTIES = [\n    \"boundContainer\",\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"continueSelectWithoutDeselect\",\n    \"toggleContinueSelect\",\n    \"toggleContinueSelectWithoutDeselect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n    \"checkInput\",\n    \"preventDefault\",\n    \"ratio\",\n    \"getElementRect\",\n    \"preventDragFromInside\",\n    \"rootContainer\",\n    \"dragCondition\",\n    \"clickBySelectEnd\",\n] as const;\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    \"cspNonce\",\n    ...PROPERTIES,\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    boundContainer: null,\n    portalContainer: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    toggleContinueSelectWithoutDeselect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n    checkInput: Boolean,\n    preventDefault: Boolean,\n    cspNonce: String,\n    ratio: Number,\n    getElementRect: Function,\n    preventDragFromInside: Boolean,\n    rootContainer: Object,\n    dragCondition: Function,\n    clickBySelectEnd: Boolean,\n    continueSelectWithoutDeselect: Boolean,\n};\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"drag\",\n    \"dragEnd\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"clickTarget\",\n    \"getSelectableElements\",\n    \"setSelectedTargets\",\n    \"getElementPoints\",\n    \"getSelectedTargets\",\n    \"findSelectableTargets\",\n    \"triggerDragStart\",\n    \"checkScroll\",\n] as const;\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto, { OnDrag, OnDragStart } from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport {\n    isObject,\n    camelize,\n    IObject,\n    addEvent,\n    removeEvent,\n    isArray,\n    isString,\n    between,\n    splitUnit,\n} from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport DragScroll from \"@scena/dragscroll\";\nimport KeyController, { getCombi } from \"keycon\";\nimport {\n    getAreaSize,\n    getOverlapPoints,\n    isInside,\n    fitPoints,\n} from \"overlap-area\";\nimport { getDistElementMatrix, calculateMatrixDist, createMatrix } from \"css-to-mat\";\nimport {\n    createElement,\n    h,\n    getClient,\n    diffValue,\n    getRect,\n    getDefaultElementRect,\n    passTargets,\n    elementFromPoint,\n} from \"./utils\";\nimport {\n    SelectoOptions,\n    SelectoProperties,\n    OnDragEvent,\n    SelectoEvents,\n    Rect,\n    BoundContainer,\n    InnerGroup,\n} from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends EventEmitter\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const getter = camelize(`get ${property}`);\n    if (prototype[getter]) {\n        attributes.get = function get() {\n            return this[getter]();\n        };\n    } else {\n        attributes.get = function get() {\n            return this.options[property];\n        };\n    }\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function set(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function set(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends EventEmitter<SelectoEvents> {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window | Element[];\n    private container!: HTMLElement;\n    private gesto!: Gesto;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private dragScroll: DragScroll = new DragScroll();\n    private keycon!: KeyController;\n    private _keydownContinueSelect: boolean;\n    private _keydownContinueSelectWithoutDeselection: boolean;\n    /**\n     *\n     */\n    constructor(options: Partial<SelectoOptions> = {}) {\n        super();\n        this.target = options.portalContainer;\n        this.container = options.container || document.body;\n        this.options = {\n            portalContainer: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            clickBySelectEnd: false,\n            hitRate: 100,\n            continueSelect: false,\n            continueSelectWithoutDeselect: false,\n            toggleContinueSelect: null,\n            toggleContinueSelectWithoutDeselect: null,\n            keyContainer: null,\n            scrollOptions: undefined,\n            checkInput: false,\n            preventDefault: false,\n            boundContainer: false,\n            preventDragFromInside: true,\n            dragCondition: null,\n            rootContainer: null,\n            getElementRect: getDefaultElementRect,\n            cspNonce: \"\",\n            ratio: 0,\n            ...options,\n        };\n        this.initElement();\n        this.initDragScroll();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     *\n     */\n    public setSelectedTargets(\n        selectedTargets: Array<HTMLElement | SVGElement>\n    ): this {\n        this.selectedTargets = selectedTargets;\n\n        return this;\n    }\n    /**\n     * You can get the currently selected targets.\n     */\n    public getSelectedTargets(): Array<HTMLElement | SVGElement> {\n        return this.selectedTargets;\n    }\n    /**\n     * `OnDragStart` is triggered by an external event.\n     * @param - external event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto();\n     *\n     * window.addEventListener(\"mousedown\", e => {\n     *   selecto.triggerDragStart(e);\n     * });\n     */\n    public triggerDragStart(e: MouseEvent | TouchEvent) {\n        this.gesto.triggerDragStart(e);\n        return this;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.gesto.unset();\n        this.injectResult.destroy();\n        removeEvent(document, \"selectstart\", this._onDocumentSelectStart);\n\n        this.keycon = null;\n        this.gesto = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n    public getElementPoints(target: HTMLElement | SVGElement) {\n        const getElementRect = this.getElementRect || getDefaultElementRect;\n        const info = getElementRect(target);\n        const points = [info.pos1, info.pos2, info.pos4, info.pos3];\n\n        if (getElementRect !== getDefaultElementRect) {\n            const rect = target.getBoundingClientRect();\n\n            return fitPoints(points, rect);\n        }\n        return points;\n    }\n    /**\n     * Get all elements set in `selectableTargets`.\n     */\n    public getSelectableElements() {\n        const selectableElements: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach((target) => {\n            if (isObject(target)) {\n                selectableElements.push(target);\n            } else {\n                const elements = [].slice.call(\n                    document.querySelectorAll(target)\n                );\n\n                elements.forEach((el) => {\n                    selectableElements.push(el);\n                });\n            }\n        });\n\n        return selectableElements;\n    }\n    /**\n     * If scroll occurs during dragging, you can manually call this method to check the position again.\n     */\n    public checkScroll() {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        const scrollOptions = this.scrollOptions;\n\n        // If it is a scrolling position, pass drag\n        scrollOptions?.container && this.dragScroll.checkScroll({\n            inputEvent: this.gesto.getCurrentEvent(),\n            ...scrollOptions,\n        });\n    }\n    /**\n     * Find for selectableTargets again during drag event\n     */\n    public findSelectableTargets(datas: any = this.gesto.getEventDatas()) {\n        const selectableTargets = this.getSelectableElements();\n        const selectablePoints = selectableTargets.map(\n            (target) => this.getElementPoints(target),\n        );\n        datas.selectableTargets = selectableTargets;\n        datas.selectablePoints = selectablePoints;\n        this._refreshGroups(datas);\n    }\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    public clickTarget(\n        e: MouseEvent | TouchEvent,\n        clickedTarget?: Element\n    ): this {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent = {\n            datas: {\n                selectFlag: false,\n            },\n            clientX,\n            clientY,\n            inputEvent: e,\n            isClick: true,\n            stop: () => {\n                return false;\n            },\n        } as any;\n        if (this._onDragStart(dragEvent, clickedTarget)) {\n            this._onDragEnd(dragEvent);\n        }\n        return this;\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect, toggleContinueSelectWithoutDeselect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect || toggleContinueSelectWithoutDeselect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon\n                .keydown(this._onKeyDown)\n                .keyup(this._onKeyUp)\n                .on(\"blur\", this._onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect, toggleContinueSelectWithoutDeselect } = this.options;\n        if ((!toggleContinueSelect && !toggleContinueSelectWithoutDeselect) || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    // with getter, setter property\n    private setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    private getContinueSelect() {\n        const {\n            continueSelect,\n            toggleContinueSelect,\n        } = this.options;\n\n        if (!toggleContinueSelect || !this._keydownContinueSelect) {\n            return continueSelect;\n        }\n        return !continueSelect;\n    }\n    private getContinueSelectWithoutDeselect() {\n        const {\n            continueSelectWithoutDeselect,\n            toggleContinueSelectWithoutDeselect,\n        } = this.options;\n\n        if (!toggleContinueSelectWithoutDeselect || !this._keydownContinueSelectWithoutDeselection) {\n            return continueSelectWithoutDeselect;\n        }\n        return !continueSelectWithoutDeselect;\n    }\n    private setToggleContinueSelect(\n        toggleContinueSelect: string[][] | string[] | string\n    ) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n    private setToggleContinueSelectWithoutDeselect(\n        toggleContinueSelectWithoutDeselect: string[][] | string[] | string\n    ) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelectWithoutDeselect, toggleContinueSelectWithoutDeselect, () => {\n            options.toggleContinueSelectWithoutDeselect = toggleContinueSelectWithoutDeselect;\n\n            this.setKeyEvent();\n        });\n    }\n    private setPreventDefault(value: boolean) {\n        this.gesto.options.preventDefault = value;\n    }\n    private setCheckInput(value: boolean) {\n        this.gesto.options.checkInput = value;\n    }\n    private initElement() {\n        this.target = createElement(\n            (<div className={CLASS_NAME}></div>) as any,\n            this.target,\n            this.container\n        );\n\n        const target = this.target;\n\n        const { dragContainer, checkInput, preventDefault } = this.options;\n        this.dragContainer =\n            typeof dragContainer === \"string\"\n                ? [].slice.call(document.querySelectorAll(dragContainer))\n                : dragContainer || (this.target.parentNode as any);\n        this.gesto = new Gesto(this.dragContainer, {\n            checkWindowBlur: true,\n            container: window,\n            checkInput,\n            preventDefault,\n        }).on({\n            dragStart: this._onDragStart,\n            drag: this._onDrag,\n            dragEnd: this._onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this._onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target, {\n            nonce: this.options.cspNonce,\n        });\n    }\n    private hitTest(\n        selectRect: Rect,\n        clientX: number,\n        clientY: number,\n        datas: any,\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n        const innerGroups: Record<string | number, Record<string | number, InnerGroup>> = datas.innerGroups;\n        const innerWidth = datas.innerWidth;\n        const innerHeight = datas.innerHeight;\n        const rectPoints = [\n            [left, top],\n            [right, top],\n            [right, bottom],\n            [left, bottom],\n        ];\n        const isHit = (points: number[][]) => {\n            const inArea = isInside([clientX, clientY], points);\n\n            if (selectByClick && inArea) {\n                return true;\n            }\n            const overlapPoints = getOverlapPoints(rectPoints, points);\n\n            if (!overlapPoints.length) {\n                return false;\n            }\n            const overlapSize = getAreaSize(overlapPoints);\n            const targetSize = getAreaSize(points);\n\n            const hitRateValue = splitUnit(`${hitRate}`);\n\n            if (hitRateValue.unit === \"px\") {\n                return overlapSize >= hitRateValue.value;\n            } else {\n                const rate = between(\n                    Math.round((overlapSize / targetSize) * 100),\n                    0,\n                    100\n                );\n\n                return rate >= Math.min(100, hitRateValue.value);\n            }\n        };\n        if (!innerGroups) {\n            const selectableTargets: Array<HTMLElement | SVGElement> = datas.selectableTargets;\n            const selectablePoints: number[][][] = datas.selectablePoints;\n\n            return selectableTargets.filter((_, i) => {\n                return isHit(selectablePoints[i]);\n            });\n        }\n        let selectedTargets: Array<HTMLElement | SVGElement> = [];\n        const minX = Math.floor(left / innerWidth);\n        const maxX = Math.floor(right / innerWidth);\n        const minY = Math.floor(top / innerHeight);\n        const maxY = Math.floor(bottom / innerHeight);\n\n        for (let x = minX; x <= maxX; ++x) {\n            const yGroups = innerGroups[x];\n\n            if (!yGroups) {\n                continue;\n            }\n            for (let y = minY; y <= maxY; ++y) {\n                const group = yGroups[y];\n\n                if (!group) {\n                    continue;\n                }\n                const { points, targets } = group;\n                points.forEach((nextPoints, i) => {\n                    if (isHit(nextPoints)) {\n                        selectedTargets.push(targets[i]);\n                    }\n                });\n            }\n        }\n        return selectedTargets;\n    }\n    private initDragScroll() {\n        this.dragScroll\n            .on(\"scroll\", ({ container, direction }) => {\n                this.emit(\"scroll\", {\n                    container,\n                    direction,\n                });\n            })\n            .on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n                const gesto = this.gesto;\n\n                if (!gesto || !gesto.isFlag()) {\n                    return;\n                }\n\n                const datas = this.gesto.getEventDatas();\n                const boundArea = datas.boundArea;\n\n                datas.startX -= offsetX;\n                datas.startY -= offsetY;\n                datas.selectablePoints.forEach((points: number[][]) => {\n                    points.forEach((pos) => {\n                        pos[0] -= offsetX;\n                        pos[1] -= offsetY;\n                    });\n                });\n                this._refreshGroups(datas);\n\n                boundArea.left -= offsetX;\n                boundArea.right -= offsetX;\n                boundArea.top -= offsetY;\n                boundArea.bottom -= offsetY;\n\n                this.gesto.scrollBy(\n                    offsetX,\n                    offsetY,\n                    inputEvent.inputEvent,\n                    false\n                );\n                this._checkSelected(this.gesto.getCurrentEvent());\n            });\n    }\n    private _select(\n        prevSelectedTargets: Array<HTMLElement | SVGElement>,\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        inputEvent: any,\n        isStart?: boolean\n    ) {\n        const { added, removed, prevList, list } = diff(\n            prevSelectedTargets,\n            selectedTargets\n        );\n\n        this.selectedTargets = selectedTargets;\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.emit(\"selectStart\", {\n                selected: selectedTargets,\n                added: added.map((index) => list[index]),\n                removed: removed.map((index) => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n        if (added.length || removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.emit(\"select\", {\n                selected: selectedTargets,\n                added: added.map((index) => list[index]),\n                removed: removed.map((index) => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n    }\n    private _selectEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        startPassedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        e: OnDragEvent\n    ) {\n        const { inputEvent, isDouble } = e;\n        const { added, removed, prevList, list } = diff(\n            startSelectedTargets,\n            this.selectedTargets\n        );\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(startPassedTargets, this.selectedTargets);\n        const type = inputEvent && inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"selectEnd\", {\n            selected: this.selectedTargets,\n            added: added.map((index) => list[index]),\n            removed: removed.map((index) => prevList[index]),\n            afterAdded: afterAdded.map((index) => afterList[index]),\n            afterRemoved: afterRemoved.map((index) => afterPrevList[index]),\n            isDragStart,\n            isClick: !!e.isClick,\n            isDouble: !!isDouble,\n            rect,\n            inputEvent,\n        });\n    }\n    private _onDragStart = (e: OnDragStart, clickedTarget?: Element) => {\n        const { datas, clientX, clientY, inputEvent } = e;\n        const {\n            selectFromInside,\n            selectByClick,\n            rootContainer,\n            boundContainer,\n            preventDragFromInside = true,\n            clickBySelectEnd,\n            dragCondition,\n        } = this.options;\n\n        if (dragCondition && !dragCondition(e)) {\n            e.stop();\n            return;\n        }\n        datas.innerWidth = window.innerWidth;\n        datas.innerHeight = window.innerHeight;\n        this.findSelectableTargets(datas);\n        datas.startSelectedTargets = this.selectedTargets;\n        datas.scaleMatrix = createMatrix();\n        datas.containerX = 0;\n        datas.containerY = 0;\n\n\n        let boundArea = {\n            left: -Infinity,\n            top: -Infinity,\n            right: Infinity,\n            bottom: Infinity,\n        };\n        if (rootContainer) {\n            const containerRect = this.container.getBoundingClientRect();\n\n            datas.containerX = containerRect.left;\n            datas.containerY = containerRect.top;\n            datas.scaleMatrix = getDistElementMatrix(this.container, rootContainer);\n        }\n\n        if (boundContainer) {\n            const boundInfo: Required<BoundContainer> =\n                isObject(boundContainer) && \"element\" in boundContainer\n                    ? {\n                        left: true,\n                        top: true,\n                        bottom: true,\n                        right: true,\n                        ...boundContainer,\n                    }\n                    : {\n                        element: boundContainer,\n                        left: true,\n                        top: true,\n                        bottom: true,\n                        right: true,\n                    };\n            const boundElement = boundInfo.element;\n            let rectElement: HTMLElement;\n\n            if (boundElement) {\n                if (isString(boundElement)) {\n                    rectElement = document.querySelector(boundElement);\n                } else if (boundElement === true) {\n                    rectElement = this.container;\n                } else {\n                    rectElement = boundElement;\n                }\n                const rect = rectElement.getBoundingClientRect();\n\n                if (boundInfo.left) {\n                    boundArea.left = rect.left;\n                }\n                if (boundInfo.top) {\n                    boundArea.top = rect.top;\n                }\n                if (boundInfo.right) {\n                    boundArea.right = rect.right;\n                }\n                if (boundInfo.bottom) {\n                    boundArea.bottom = rect.bottom;\n                }\n            }\n        }\n\n        datas.boundArea = boundArea;\n\n        const hitRect = {\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n            width: 0,\n            height: 0,\n        };\n        let firstPassedTargets: Array<HTMLElement | SVGElement> = [];\n\n        if (!selectFromInside || (selectByClick && !clickBySelectEnd)) {\n            const pointTarget = this._findElement(\n                clickedTarget || elementFromPoint(clientX, clientY),\n                datas.selectableTargets,\n            );\n            firstPassedTargets = pointTarget ? [pointTarget] : [];\n        }\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        const isPreventSelect = !selectFromInside && hasInsideTargets;\n\n        // prevent drag from inside when selectByClick is false\n        if (isPreventSelect && !selectByClick) {\n            e.stop();\n            return false;\n        }\n\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts (triggers on mousedown or touchstart), the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result =\n            !(e as any).isClick && isTrusted\n                ? this.emit(\"dragStart\", { ...e })\n                : true;\n\n        if (!result) {\n            e.stop();\n            return false;\n        }\n\n        if (this.continueSelect) {\n            firstPassedTargets = passTargets(\n                this.selectedTargets,\n                firstPassedTargets,\n                this.continueSelectWithoutDeselect,\n            );\n            datas.startPassedTargets = this.selectedTargets;\n        } else {\n            datas.startPassedTargets = [];\n        }\n        this._select(\n            this.selectedTargets,\n            firstPassedTargets,\n            hitRect,\n            inputEvent,\n            true\n        );\n        datas.startX = clientX;\n        datas.startY = clientY;\n        datas.selectFlag = false;\n        datas.preventDragFromInside = false;\n\n        const offsetPos = calculateMatrixDist(datas.scaleMatrix, [\n            clientX - datas.containerX,\n            clientY - datas.containerY,\n        ]);\n        datas.boundsArea = this.target.style.cssText += `position: ${rootContainer ? \"absolute\" : \"fixed\"};`\n            + `left:0px;top:0px;`\n            + `transform: translate(${offsetPos[0]}px, ${offsetPos[1]}px)`;\n\n        if (isPreventSelect && selectByClick && !clickBySelectEnd) {\n            inputEvent.preventDefault();\n\n            // prevent drag from inside when selectByClick is true and force call `selectEnd`\n            if (preventDragFromInside) {\n                this._selectEnd(\n                    datas.startSelectedTargets,\n                    datas.startPassedTargets,\n                    hitRect,\n                    e\n                );\n                datas.preventDragFromInside = true;\n            }\n        } else {\n            datas.selectFlag = true;\n            if (type === \"touchstart\") {\n                inputEvent.preventDefault();\n            }\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                this.dragScroll.dragStart(e, scrollOptions);\n            }\n            if (clickBySelectEnd) {\n                datas.selectFlag = false;\n                e.preventDrag();\n            }\n        }\n        return true;\n    };\n    private _checkSelected(e: any, rect = getRect(e, this.options.ratio)) {\n        const { datas, inputEvent } = e;\n        const { top, left, width, height } = rect;\n        const selectFlag = datas.selectFlag;\n        const {\n            containerX,\n            containerY,\n            scaleMatrix,\n        } = datas;\n        const offsetPos = calculateMatrixDist(scaleMatrix, [\n            left - containerX,\n            top - containerY,\n        ]);\n        const offsetSize = calculateMatrixDist(scaleMatrix, [\n            width,\n            height,\n        ]);\n        let prevSelectedTargets: Array<HTMLElement | SVGElement> = [];\n        let selectedTargets: Array<HTMLElement | SVGElement> = [];\n        if (selectFlag) {\n            this.target.style.cssText +=\n                `display: block;` +\n                `left:0px;top:0px;` +\n                `transform: translate(${offsetPos[0]}px, ${offsetPos[1]}px);` +\n                `width:${offsetSize[0]}px;height:${offsetSize[1]}px;`;\n\n            const passedTargets = this.hitTest(\n                rect,\n                datas.startX,\n                datas.startY,\n                datas,\n            );\n            prevSelectedTargets = this.selectedTargets;\n            selectedTargets = passTargets(\n                datas.startPassedTargets,\n                passedTargets,\n                this.continueSelect && this.continueSelectWithoutDeselect,\n            );\n\n            this.selectedTargets = selectedTargets;\n        }\n        /**\n         * When the drag, the drag event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event drag\n         * @param {OnDrag} - Parameters for the drag event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"drag\", e => {\n         *   e.stop();\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result = this.emit(\"drag\", {\n            ...e,\n            isSelect: selectFlag,\n            rect,\n        });\n        if (result === false) {\n            this.target.style.cssText += \"display: none;\";\n            e.stop();\n            return;\n        }\n\n        if (selectFlag) {\n            this._select(prevSelectedTargets, selectedTargets, rect, inputEvent);\n        }\n    }\n    private _onDrag = (e: OnDrag) => {\n        if (e.datas.selectFlag) {\n            const scrollOptions = this.scrollOptions;\n\n            // If it is a scrolling position, pass drag\n            if (scrollOptions?.container && this.dragScroll.drag(e, scrollOptions)) {\n                return;\n            }\n        }\n        this._checkSelected(e);\n    };\n    private _onDragEnd = (e: OnDragEvent) => {\n        const { datas, inputEvent } = e;\n        const rect = getRect(e, this.options.ratio);\n        const selectFlag = datas.selectFlag;\n\n        /**\n         * When the drag ends (triggers on mouseup or touchend after drag), the dragEnd event is called.\n         * @memberof Selecto\n         * @event dragEnd\n         * @param {OnDragEnd} - Parameters for the dragEnd event\n         */\n        if (inputEvent && !e.isClick) {\n            this.emit(\"dragEnd\", {\n                isDouble: !!e.isDouble,\n                isDrag: false,\n                isSelect: selectFlag,\n                ...e,\n                isClick: !!e.isClick,\n                rect,\n            });\n        }\n        this.target.style.cssText += \"display: none;\";\n        if (selectFlag) {\n            datas.selectFlag = false;\n            this.dragScroll.dragEnd();\n        } else if (this.selectByClick && this.clickBySelectEnd) {\n            // only clickBySelectEnd\n            const pointTarget = this._findElement(\n                elementFromPoint(e.clientX, e.clientY),\n                datas.selectableTargets,\n            );\n            this._select(this.selectedTargets, pointTarget ? [pointTarget] : [], rect, inputEvent);\n        }\n        if (!datas.preventDragFromInside) {\n            this._selectEnd(\n                datas.startSelectedTargets,\n                datas.startPassedTargets,\n                rect,\n                e\n            );\n        }\n    };\n    private _sameCombiKey(e: any, keys: string | string[] | string[][], isKeyup?: boolean) {\n        if (!keys) {\n            return false;\n        }\n        const combi = getCombi(e.inputEvent, e.key);\n        const nextKeys = [].concat(keys);\n        const toggleKeys = isArray(nextKeys[0]) ? nextKeys : [nextKeys];\n\n        if (isKeyup) {\n            const singleKey = e.key;\n\n            return toggleKeys.some((keys) =>\n                keys.some((key) => key === singleKey)\n            );\n        }\n        return toggleKeys.some((keys) =>\n            keys.every((key) => combi.indexOf(key) > -1)\n        );\n    }\n    private _onKeyDown = (e: any) => {\n        const options = this.options;\n        let isKeyDown = false;\n\n        if (!this._keydownContinueSelect) {\n            const result = this._sameCombiKey(e, options.toggleContinueSelect);\n\n            this._keydownContinueSelect = result;\n            isKeyDown = result;\n        }\n        if (!this._keydownContinueSelectWithoutDeselection) {\n            const result = this._sameCombiKey(e, options.toggleContinueSelectWithoutDeselect);\n\n            this._keydownContinueSelectWithoutDeselection = result;\n            isKeyDown = isKeyDown || result;\n        }\n        if (!isKeyDown) {\n            return;\n        }\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"keydown\", {\n            keydownContinueSelect: this._keydownContinueSelect,\n            keydownContinueSelectWithoutDeselection: this._keydownContinueSelectWithoutDeselection,\n        });\n    };\n    private _onKeyUp = (e: any) => {\n        const options = this.options;\n        let isKeyUp = false;\n\n        if (this._keydownContinueSelect) {\n            const result = this._sameCombiKey(e, options.toggleContinueSelect, true);\n            this._keydownContinueSelect = !result;\n\n            isKeyUp = result;\n        }\n        if (this._keydownContinueSelectWithoutDeselection) {\n            const result = this._sameCombiKey(e, options.toggleContinueSelectWithoutDeselect, true);\n            this._keydownContinueSelectWithoutDeselection = !result;\n\n            isKeyUp = isKeyUp || result;\n        }\n        if (!isKeyUp) {\n            return;\n        }\n\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"keyup\", {\n            keydownContinueSelect: this._keydownContinueSelect,\n            keydownContinueSelectWithoutDeselection: this._keydownContinueSelectWithoutDeselection,\n        });\n    };\n    private _onBlur = () => {\n        if (this._keydownContinueSelect || this._keydownContinueSelectWithoutDeselection) {\n            this._keydownContinueSelect = false;\n            this._keydownContinueSelectWithoutDeselection = false;\n            this.emit(\"keyup\", {\n                keydownContinueSelect: this._keydownContinueSelect,\n                keydownContinueSelectWithoutDeselection: this._keydownContinueSelectWithoutDeselection,\n            });\n        }\n    };\n    private _onDocumentSelectStart = (e: any) => {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        const containers =\n            dragContainer instanceof Element\n                ? [dragContainer]\n                : ([].slice.call(dragContainer) as Element[]);\n        const target = e.target;\n\n        containers.some((container) => {\n            if (container === target || container.contains(target)) {\n                e.preventDefault();\n                return true;\n            }\n        });\n    };\n    private _findElement(clickedTarget: Element | null, selectableTargets: Array<Element>): HTMLElement | SVGElement {\n        let pointTarget = clickedTarget;\n\n        while (pointTarget) {\n            if (selectableTargets.indexOf(pointTarget) > -1) {\n                break;\n            }\n            pointTarget = pointTarget.parentElement;\n        }\n        return pointTarget as any;\n    }\n    private _refreshGroups(datas: any) {\n        const innerWidth = datas.innerWidth;\n        const innerHeight = datas.innerHeight;\n\n        if (!innerWidth || !innerHeight) {\n            datas.innerGroups = null;\n        } else {\n            const selectableTargets: Array<HTMLElement | SVGElement> = datas.selectableTargets;\n            const selectablePoints: number[][][] = datas.selectablePoints;\n            const groups: Record<string | number, Record<string | number, InnerGroup>> = {};\n\n            selectablePoints.forEach((points, i) => {\n                const pos = points[0];\n                const x = Math.floor(pos[0] / innerWidth);\n                const y = Math.floor(pos[1] / innerHeight);\n\n                groups[x] = groups[x] || {};\n                groups[x][y] = groups[x][y] || {\n                    points: [],\n                    targets: [],\n                };\n\n                const { targets, points: groupPoints } = groups[x][y];\n\n                targets.push(selectableTargets[i]);\n                groupPoints.push(points);\n            });\n\n            datas.innerGroups = groups;\n        }\n    }\n}\n\ninterface Selecto extends SelectoProperties { }\n\nexport default Selecto;\n","import SelectoManager from \"./SelectoManager\";\n\nclass Selecto extends SelectoManager {\n\n}\nexport default Selecto;\n","import Selecto, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Selecto as any)[name] = modules[name];\n}\n\nexport default Selecto;\n"],"names":["getClient","e","touch","touches","changedTouches","clientX","clientY","elementFromPoint","document","createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","name","setAttribute","elChildren","forEach","child","i","split","hasClass","addClass","elStyle","appendChild","h","attrs","_i","_a","_b","_c","diffValue","prev","cur","func","getRect","ratio","boundArea","datas","distX","distY","_d","startX","startY","nextHeight","Math","sqrt","nextWidth","width","abs","height","maxWidth","left","right","maxHeight","top","bottom","tx","min","ty","getDefaultElementRect","rect","getBoundingClientRect","pos1","pos2","pos3","pos4","passTargets","beforeTargets","afterTargets","continueSelectWithoutDeselect","list","prevList","added","removed","maintained","map","index","nextIndex","injector","styled","CLASS_NAME","PROPERTIES","OPTIONS","__spreadArrays","OPTION_TYPES","boundContainer","portalContainer","dragContainer","selectableTargets","Array","selectByClick","Boolean","selectFromInside","continueSelect","toggleContinueSelect","toggleContinueSelectWithoutDeselect","keyContainer","hitRate","Number","scrollOptions","Object","checkInput","preventDefault","cspNonce","String","getElementRect","Function","preventDragFromInside","rootContainer","dragCondition","clickBySelectEnd","EVENTS","METHODS","__extends","options","_super","_this","DragScroll","clickedTarget","inputEvent","stop","innerWidth","window","innerHeight","findSelectableTargets","startSelectedTargets","selectedTargets","scaleMatrix","createMatrix","containerX","containerY","Infinity","containerRect","getDistElementMatrix","boundInfo","isObject","element","boundElement","rectElement","isString","querySelector","hitRect","firstPassedTargets","pointTarget","_findElement","hasInsideTargets","length","isPreventSelect","type","isTrusted","result","isClick","emit","startPassedTargets","_select","selectFlag","offsetPos","calculateMatrixDist","boundsArea","target","cssText","_selectEnd","dragScroll","dragStart","preventDrag","drag","_checkSelected","isDouble","isDrag","isSelect","dragEnd","isKeyDown","_keydownContinueSelect","_sameCombiKey","_keydownContinueSelectWithoutDeselection","keydownContinueSelect","keydownContinueSelectWithoutDeselection","isKeyUp","gesto","isFlag","documentElement","containers","Element","slice","call","some","contains","body","undefined","initElement","initDragScroll","setKeyController","triggerDragStart","off","keycon","destroy","unset","injectResult","removeEvent","_onDocumentSelectStart","info","points","fitPoints","selectableElements","push","elements","querySelectorAll","checkScroll","getCurrentEvent","getEventDatas","getSelectableElements","selectablePoints","getElementPoints","_refreshGroups","dragEvent","_onDragStart","_onDragEnd","KeyController","keydown","_onKeyDown","keyup","_onKeyUp","on","_onBlur","setKeyEvent","value","parentNode","Gesto","checkWindowBlur","_onDrag","addEvent","inject","nonce","selectRect","innerGroups","rectPoints","isHit","inArea","isInside","overlapPoints","getOverlapPoints","overlapSize","getAreaSize","targetSize","hitRateValue","splitUnit","unit","rate","between","round","selectablePoints_1","filter","_","minX","floor","maxX","minY","maxY","x","yGroups","y","group","targets","nextPoints","direction","offsetX","offsetY","pos","scrollBy","prevSelectedTargets","isStart","selected","afterAdded","afterRemoved","afterPrevList","afterList","isDragStart","offsetSize","passedTargets","hitTest","keys","isKeyup","combi","getCombi","key","nextKeys","concat","toggleKeys","isArray","singleKey_1","every","indexOf","parentElement","selectableTargets_1","groups_1","groupPoints","Selecto","Properties","prototype","property","enumerable","configurable","get","getter","camelize","setter","set","defineProperty","EventEmitter","SelectoManager","modules"],"mappings":"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"}