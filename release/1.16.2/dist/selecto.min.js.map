{"version":3,"file":"selecto.min.js","sources":["../src/utils.ts","../src/consts.ts","../src/Selecto.tsx","../src/SelectoManager.tsx","../src/index.umd.ts"],"sourcesContent":["import { Hypertext, Rect } from \"./types\";\nimport { IObject, addClass, hasClass, calculateBoundSize } from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0] || e.changedTouches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\n\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\n\nexport function getRect(\n    e: any, ratio: number,\n    boundArea = e.datas.boundArea,\n): Rect {\n    let {\n        distX = 0,\n        distY = 0,\n    } = e;\n    const { startX, startY } = e.datas;\n\n    if (ratio > 0) {\n        const nextHeight = Math.sqrt((distX * distX + distY * distY) / (1 + ratio * ratio));\n        const nextWidth = ratio * nextHeight;\n\n        distX = (distX >= 0 ? 1 : -1) * nextWidth;\n        distY = (distY >= 0 ? 1 : -1) * nextHeight;\n    }\n    let width = Math.abs(distX);\n    let height = Math.abs(distY);\n\n    const maxWidth = distX < 0 ? startX - boundArea.left : boundArea.right - startX;\n    const maxHeight = distY < 0 ? startY - boundArea.top : boundArea.bottom - startY;\n\n    [width, height] = calculateBoundSize([width, height], [0, 0], [maxWidth, maxHeight], !!ratio);\n    distX = (distX >= 0 ? 1 : -1) * width;\n    distY = (distY >= 0 ? 1 : -1) * height;\n\n    const tx = Math.min(0, distX);\n    const ty = Math.min(0, distY);\n    const left = startX + tx;\n    const top = startY + ty;\n\n    return {\n        left,\n        top,\n        right: left + width,\n        bottom: top + height,\n        width,\n        height,\n    };\n}\n\nexport function getDefaultElementRect(el: HTMLElement | SVGElement) {\n    const rect = el.getBoundingClientRect();\n    const { left, top, width, height } = rect;\n\n    return {\n        pos1: [left, top],\n        pos2: [left + width, top],\n        pos3: [left, top + height],\n        pos4: [left + width, top + height],\n    };\n}\n\nexport function passTargets(\n    beforeTargets: Array<HTMLElement | SVGElement>,\n    afterTargets: Array<HTMLElement | SVGElement>,\n    continueSelectWithoutDeselect: boolean,\n) {\n    const {\n        list,\n        prevList,\n        added,\n        removed,\n        maintained,\n    } = diff(beforeTargets, afterTargets);\n\n    return [\n        ...added.map(index => list[index]),\n        ...removed.map(index => prevList[index]),\n        ...continueSelectWithoutDeselect ? maintained.map(([, nextIndex]) => list[nextIndex]) : [],\n    ];\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    pointer-events: none;\n    will-change: transform;\n    z-index: 100;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\nexport const PROPERTIES = [\n    \"boundContainer\",\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"toggleContinueSelect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n    \"checkInput\",\n    \"preventDefault\",\n    \"ratio\",\n    \"getElementRect\",\n    \"preventDragFromInside\",\n    \"rootContainer\",\n    \"dragCondition\",\n    \"clickBySelectEnd\",\n] as const;\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    \"cspNonce\",\n    \"continueSelectWithoutDeselect\",\n    ...PROPERTIES,\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    boundContainer: null,\n    portalContainer: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n    checkInput: Boolean,\n    preventDefault: Boolean,\n    cspNonce: String,\n    ratio: Number,\n    getElementRect: Function,\n    preventDragFromInside: Boolean,\n    rootContainer: Object,\n    dragCondition: Function,\n    clickBySelectEnd: Boolean,\n    continueSelectWithoutDeselect: Boolean,\n};\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"drag\",\n    \"dragEnd\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"clickTarget\",\n    \"getSelectableElements\",\n    \"setSelectedTargets\",\n    \"getElementPoints\",\n    \"getSelectedTargets\",\n    \"findSelectableTargets\",\n    \"triggerDragStart\",\n    \"checkScroll\",\n] as const;\n","import SelectoManager from \"./SelectoManager\";\n\nclass Selecto extends SelectoManager {\n\n}\nexport default Selecto;\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto, { OnDrag, OnDragStart } from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport {\n    isObject,\n    camelize,\n    IObject,\n    addEvent,\n    removeEvent,\n    isArray,\n    isString,\n    between,\n    splitUnit,\n} from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport DragScroll from \"@scena/dragscroll\";\nimport KeyController, { getCombi } from \"keycon\";\nimport {\n    getAreaSize,\n    getOverlapPoints,\n    isInside,\n    fitPoints,\n} from \"overlap-area\";\nimport { getDistElementMatrix, calculateMatrixDist, createMatrix } from \"css-to-mat\";\nimport {\n    createElement,\n    h,\n    getClient,\n    diffValue,\n    getRect,\n    getDefaultElementRect,\n    passTargets,\n} from \"./utils\";\nimport {\n    SelectoOptions,\n    SelectoProperties,\n    OnDragEvent,\n    SelectoEvents,\n    Rect,\n    BoundContainer,\n} from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends EventEmitter\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function set(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function set(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends EventEmitter<SelectoEvents> {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window | Element[];\n    private container!: HTMLElement;\n    private gesto!: Gesto;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private dragScroll: DragScroll = new DragScroll();\n    private keycon!: KeyController;\n    /**\n     *\n     */\n    constructor(options: Partial<SelectoOptions> = {}) {\n        super();\n        this.target = options.portalContainer;\n        this.container = options.container || document.body;\n        this.options = {\n            portalContainer: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            clickBySelectEnd: false,\n            hitRate: 100,\n            continueSelect: false,\n            continueSelectWithoutDeselect: false,\n            toggleContinueSelect: null,\n            keyContainer: null,\n            scrollOptions: undefined,\n            checkInput: false,\n            preventDefault: false,\n            boundContainer: false,\n            preventDragFromInside: true,\n            dragCondition: null,\n            rootContainer: null,\n            getElementRect: getDefaultElementRect,\n            cspNonce: \"\",\n            ratio: 0,\n            ...options,\n        };\n        this.initElement();\n        this.initDragScroll();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     *\n     */\n    public setSelectedTargets(\n        selectedTargets: Array<HTMLElement | SVGElement>\n    ): this {\n        this.selectedTargets = selectedTargets;\n\n        return this;\n    }\n    /**\n     * You can get the currently selected targets.\n     */\n    public getSelectedTargets(): Array<HTMLElement | SVGElement> {\n        return this.selectedTargets;\n    }\n    public setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    public setToggleContinueSelect(\n        toggleContinueSelect: string[][] | string[] | string\n    ) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n    public setPreventDefault(value: boolean) {\n        this.gesto.options.preventDefault = value;\n    }\n    public setCheckInput(value: boolean) {\n        this.gesto.options.checkInput = value;\n    }\n    /**\n     * `OnDragStart` is triggered by an external event.\n     * @param - external event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto();\n     *\n     * window.addEventListener(\"mousedown\", e => {\n     *   selecto.triggerDragStart(e);\n     * });\n     */\n    public triggerDragStart(e: MouseEvent | TouchEvent) {\n        this.gesto.triggerDragStart(e);\n        return this;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.gesto.unset();\n        this.injectResult.destroy();\n        removeEvent(document, \"selectstart\", this._onDocumentSelectStart);\n\n        this.keycon = null;\n        this.gesto = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n    public getElementPoints(target: HTMLElement | SVGElement) {\n        const getElementRect = this.getElementRect || getDefaultElementRect;\n        const info = getElementRect(target);\n        const points = [info.pos1, info.pos2, info.pos4, info.pos3];\n\n        if (getElementRect !== getDefaultElementRect) {\n            const rect = target.getBoundingClientRect();\n\n            return fitPoints(points, rect);\n        }\n        return points;\n    }\n    /**\n     * Get all elements set in `selectableTargets`.\n     */\n    public getSelectableElements() {\n        const selectableElements: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach((target) => {\n            if (isObject(target)) {\n                selectableElements.push(target);\n            } else {\n                const elements = [].slice.call(\n                    document.querySelectorAll(target)\n                );\n\n                elements.forEach((el) => {\n                    selectableElements.push(el);\n                });\n            }\n        });\n\n        return selectableElements;\n    }\n    /**\n     * If scroll occurs during dragging, you can manually call this method to check the position again.\n     */\n    public checkScroll() {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        const scrollOptions = this.scrollOptions;\n\n        // If it is a scrolling position, pass drag\n        scrollOptions?.container && this.dragScroll.checkScroll({\n            inputEvent: this.gesto.getCurrentEvent(),\n            ...scrollOptions,\n        });\n    }\n    /**\n     * Find for selectableTargets again during drag event\n     */\n    public findSelectableTargets(datas: any = this.gesto.getEventDatas()) {\n        const selectableTargets = this.getSelectableElements();\n        const selectablePoints = selectableTargets.map((target) =>\n            this.getElementPoints(target)\n        );\n        datas.selectableTargets = selectableTargets;\n        datas.selectablePoints = selectablePoints;\n    }\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    public clickTarget(\n        e: MouseEvent | TouchEvent,\n        clickedTarget?: Element\n    ): this {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent = {\n            datas: {\n                selectFlag: false,\n            },\n            clientX,\n            clientY,\n            inputEvent: e,\n            isClick: true,\n            stop: () => {\n                return false;\n            },\n        } as any;\n        if (this._onDragStart(dragEvent, clickedTarget)) {\n            this._onDragEnd(dragEvent);\n        }\n        return this;\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon\n                .keydown(this._onKeyDown)\n                .keyup(this._onKeyUp)\n                .on(\"blur\", this._onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect } = this.options;\n        if (!toggleContinueSelect || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    private initElement() {\n        this.target = createElement(\n            (<div className={CLASS_NAME}></div>) as any,\n            this.target,\n            this.container\n        );\n\n        const target = this.target;\n\n        const { dragContainer, checkInput, preventDefault } = this.options;\n        this.dragContainer =\n            typeof dragContainer === \"string\"\n                ? [].slice.call(document.querySelectorAll(dragContainer))\n                : dragContainer || (this.target.parentNode as any);\n        this.gesto = new Gesto(this.dragContainer, {\n            checkWindowBlur: true,\n            container: window,\n            checkInput,\n            preventDefault,\n        }).on({\n            dragStart: this._onDragStart,\n            drag: this._onDrag,\n            dragEnd: this._onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this._onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target, {\n            nonce: this.options.cspNonce,\n        });\n    }\n    private hitTest(\n        selectRect: Rect,\n        clientX: number,\n        clientY: number,\n        targets: Array<HTMLElement | SVGElement>,\n        selectablePoints: number[][][]\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n        const rectPoints = [\n            [left, top],\n            [right, top],\n            [right, bottom],\n            [left, bottom],\n        ];\n        return targets.filter((_, i) => {\n            const points = selectablePoints[i];\n            const inArea = isInside([clientX, clientY], points);\n\n            if (selectByClick && inArea) {\n                return true;\n            }\n            const overlapPoints = getOverlapPoints(rectPoints, points);\n\n            if (!overlapPoints.length) {\n                return false;\n            }\n            const overlapSize = getAreaSize(overlapPoints);\n            const targetSize = getAreaSize(points);\n\n            const hitRateValue = splitUnit(`${hitRate}`);\n\n            if (hitRateValue.unit === \"px\") {\n                return overlapSize >= hitRateValue.value;\n            } else {\n                const rate = between(\n                    Math.round((overlapSize / targetSize) * 100),\n                    0,\n                    100\n                );\n\n                return rate >= Math.min(100, hitRateValue.value);\n            }\n        });\n    }\n    private initDragScroll() {\n        this.dragScroll\n            .on(\"scroll\", ({ container, direction }) => {\n                this.emit(\"scroll\", {\n                    container,\n                    direction,\n                });\n            })\n            .on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n                const gesto = this.gesto;\n\n                if (!gesto || !gesto.isFlag()) {\n                    return;\n                }\n\n                const datas = this.gesto.getEventDatas();\n                const boundArea = datas.boundArea;\n\n                datas.startX -= offsetX;\n                datas.startY -= offsetY;\n                datas.selectablePoints.forEach((points: number[][]) => {\n                    points.forEach((pos) => {\n                        pos[0] -= offsetX;\n                        pos[1] -= offsetY;\n                    });\n                });\n\n                boundArea.left -= offsetX;\n                boundArea.right -= offsetX;\n                boundArea.top -= offsetY;\n                boundArea.bottom -= offsetY;\n\n                this.gesto.scrollBy(\n                    offsetX,\n                    offsetY,\n                    inputEvent.inputEvent,\n                    false\n                );\n                this._checkSelected(this.gesto.getCurrentEvent());\n            });\n    }\n    private _select(\n        prevSelectedTargets: Array<HTMLElement | SVGElement>,\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        inputEvent: any,\n        isStart?: boolean\n    ) {\n        const { added, removed, prevList, list } = diff(\n            prevSelectedTargets,\n            selectedTargets\n        );\n\n        this.selectedTargets = selectedTargets;\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.emit(\"selectStart\", {\n                selected: selectedTargets,\n                added: added.map((index) => list[index]),\n                removed: removed.map((index) => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n        if (added.length || removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.emit(\"select\", {\n                selected: selectedTargets,\n                added: added.map((index) => list[index]),\n                removed: removed.map((index) => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n    }\n    private _selectEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        startPassedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        e: OnDragEvent\n    ) {\n        const { inputEvent, isDouble } = e;\n        const { added, removed, prevList, list } = diff(\n            startSelectedTargets,\n            this.selectedTargets\n        );\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(startPassedTargets, this.selectedTargets);\n        const type = inputEvent && inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"selectEnd\", {\n            selected: this.selectedTargets,\n            added: added.map((index) => list[index]),\n            removed: removed.map((index) => prevList[index]),\n            afterAdded: afterAdded.map((index) => afterList[index]),\n            afterRemoved: afterRemoved.map((index) => afterPrevList[index]),\n            isDragStart,\n            isClick: !!e.isClick,\n            isDouble: !!isDouble,\n            rect,\n            inputEvent,\n        });\n    }\n    private _onDragStart = (e: OnDragStart, clickedTarget?: Element) => {\n        const { datas, clientX, clientY, inputEvent } = e;\n        const {\n            continueSelect,\n            continueSelectWithoutDeselect,\n            selectFromInside,\n            selectByClick,\n            rootContainer,\n            boundContainer,\n            preventDragFromInside = true,\n            clickBySelectEnd,\n            dragCondition,\n        } = this.options;\n\n        if (dragCondition && !dragCondition(e)) {\n            e.stop();\n            return;\n        }\n        this.findSelectableTargets(datas);\n        datas.startSelectedTargets = this.selectedTargets;\n        datas.scaleMatrix = createMatrix();\n        datas.containerX = 0;\n        datas.containerY = 0;\n\n        let boundArea = {\n            left: -Infinity,\n            top: -Infinity,\n            right: Infinity,\n            bottom: Infinity,\n        };\n        if (rootContainer) {\n            const containerRect = this.container.getBoundingClientRect();\n\n            datas.containerX = containerRect.left;\n            datas.containerY = containerRect.top;\n            datas.scaleMatrix = getDistElementMatrix(this.container, rootContainer);\n        }\n\n        if (boundContainer) {\n            const boundInfo: Required<BoundContainer> =\n                isObject(boundContainer) && \"element\" in boundContainer\n                    ? {\n                        left: true,\n                        top: true,\n                        bottom: true,\n                        right: true,\n                        ...boundContainer,\n                    }\n                    : {\n                        element: boundContainer,\n                        left: true,\n                        top: true,\n                        bottom: true,\n                        right: true,\n                    };\n            const boundElement = boundInfo.element;\n            let rectElement: HTMLElement;\n\n            if (boundElement) {\n                if (isString(boundElement)) {\n                    rectElement = document.querySelector(boundElement);\n                } else if (boundElement === true) {\n                    rectElement = this.container;\n                } else {\n                    rectElement = boundElement;\n                }\n                const rect = rectElement.getBoundingClientRect();\n\n                if (boundInfo.left) {\n                    boundArea.left = rect.left;\n                }\n                if (boundInfo.top) {\n                    boundArea.top = rect.top;\n                }\n                if (boundInfo.right) {\n                    boundArea.right = rect.right;\n                }\n                if (boundInfo.bottom) {\n                    boundArea.bottom = rect.bottom;\n                }\n            }\n        }\n\n        datas.boundArea = boundArea;\n\n        const hitRect = {\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n            width: 0,\n            height: 0,\n        };\n        let firstPassedTargets: Array<HTMLElement | SVGElement> = [];\n\n        if (!selectFromInside || (selectByClick && !clickBySelectEnd)) {\n            const pointTarget = this._findElement(\n                (clickedTarget ||\n                document.elementFromPoint(clientX, clientY)) as\n                | HTMLElement\n                | SVGElement,\n                datas.selectableTargets,\n            );\n            firstPassedTargets = pointTarget ? [pointTarget] : [];\n        }\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        const isPreventSelect = !selectFromInside && hasInsideTargets;\n\n        // prevent drag from inside when selectByClick is false\n        if (isPreventSelect && !selectByClick) {\n            e.stop();\n            return false;\n        }\n\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts (triggers on mousedown or touchstart), the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result =\n            !(e as any).isClick && isTrusted\n                ? this.emit(\"dragStart\", { ...e })\n                : true;\n\n        if (!result) {\n            e.stop();\n            return false;\n        }\n\n        if (continueSelect) {\n            firstPassedTargets = passTargets(\n                this.selectedTargets,\n                firstPassedTargets,\n                continueSelectWithoutDeselect,\n            );\n            datas.startPassedTargets = this.selectedTargets;\n        } else {\n            datas.startPassedTargets = [];\n        }\n        this._select(\n            this.selectedTargets,\n            firstPassedTargets,\n            hitRect,\n            inputEvent,\n            true\n        );\n        datas.startX = clientX;\n        datas.startY = clientY;\n        datas.selectFlag = false;\n        datas.preventDragFromInside = false;\n\n        const offsetPos = calculateMatrixDist(datas.scaleMatrix, [\n            clientX - datas.containerX,\n            clientY - datas.containerY,\n        ]);\n        datas.boundsArea = this.target.style.cssText += `position: ${rootContainer ? \"absolute\" : \"fixed\"};`\n            + `left:0px;top:0px;`\n            + `transform: translate(${offsetPos[0]}px, ${offsetPos[1]}px)`;\n\n        if (isPreventSelect && selectByClick && !clickBySelectEnd) {\n            inputEvent.preventDefault();\n\n            // prevent drag from inside when selectByClick is true and force call `selectEnd`\n            if (preventDragFromInside) {\n                this._selectEnd(\n                    datas.startSelectedTargets,\n                    datas.startPassedTargets,\n                    hitRect,\n                    e\n                );\n                datas.preventDragFromInside = true;\n            }\n        } else {\n            datas.selectFlag = true;\n            if (type === \"touchstart\") {\n                inputEvent.preventDefault();\n            }\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                this.dragScroll.dragStart(e, scrollOptions);\n            }\n            if (clickBySelectEnd) {\n                datas.selectFlag = false;\n                e.preventDrag();\n            }\n        }\n        return true;\n    };\n    private _checkSelected(e: any, rect = getRect(e, this.options.ratio)) {\n        const { datas, inputEvent } = e;\n        const { top, left, width, height } = rect;\n        const selectFlag = datas.selectFlag;\n        const options = this.options;\n        const {\n            containerX,\n            containerY,\n            scaleMatrix,\n        } = datas;\n        const offsetPos = calculateMatrixDist(scaleMatrix, [\n            left - containerX,\n            top - containerY,\n        ]);\n        const offsetSize = calculateMatrixDist(scaleMatrix, [\n            width,\n            height,\n        ]);\n        let prevSelectedTargets: Array<HTMLElement | SVGElement> = [];\n        let selectedTargets: Array<HTMLElement | SVGElement> = [];\n        if (selectFlag) {\n            this.target.style.cssText +=\n                `display: block;` +\n                `left:0px;top:0px;` +\n                `transform: translate(${offsetPos[0]}px, ${offsetPos[1]}px);` +\n                `width:${offsetSize[0]}px;height:${offsetSize[1]}px;`;\n\n            const passedTargets = this.hitTest(\n                rect,\n                datas.startX,\n                datas.startY,\n                datas.selectableTargets,\n                datas.selectablePoints\n            );\n            prevSelectedTargets = this.selectedTargets;\n            selectedTargets = passTargets(\n                datas.startPassedTargets,\n                passedTargets,\n                options.continueSelect && options.continueSelectWithoutDeselect,\n            );\n\n            this.selectedTargets = selectedTargets;\n        }\n        /**\n         * When the drag, the drag event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event drag\n         * @param {OnDrag} - Parameters for the drag event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"drag\", e => {\n         *   e.stop();\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result = this.emit(\"drag\", {\n            ...e,\n            isSelect: selectFlag,\n            rect,\n        });\n        if (result === false) {\n            this.target.style.cssText += \"display: none;\";\n            e.stop();\n            return;\n        }\n\n        if (selectFlag) {\n            this._select(prevSelectedTargets, selectedTargets, rect, inputEvent);\n        }\n    }\n    private _onDrag = (e: OnDrag) => {\n        if (e.datas.selectFlag) {\n            const scrollOptions = this.scrollOptions;\n\n            // If it is a scrolling position, pass drag\n            if (scrollOptions?.container && this.dragScroll.drag(e, scrollOptions)) {\n                return;\n            }\n        }\n        this._checkSelected(e);\n    };\n    private _onDragEnd = (e: OnDragEvent) => {\n        const { datas, inputEvent } = e;\n        const rect = getRect(e, this.options.ratio);\n        const selectFlag = datas.selectFlag;\n\n        /**\n         * When the drag ends (triggers on mouseup or touchend after drag), the dragEnd event is called.\n         * @memberof Selecto\n         * @event dragEnd\n         * @param {OnDragEnd} - Parameters for the dragEnd event\n         */\n        if (inputEvent && !e.isClick) {\n            this.emit(\"dragEnd\", {\n                isDouble: !!e.isDouble,\n                isDrag: false,\n                isSelect: selectFlag,\n                ...e,\n                isClick: !!e.isClick,\n                rect,\n            });\n        }\n        this.target.style.cssText += \"display: none;\";\n        if (selectFlag) {\n            datas.selectFlag = false;\n            this.dragScroll.dragEnd();\n        } else if (this.selectByClick && this.clickBySelectEnd) {\n            // only clickBySelectEnd\n            const pointTarget = this._findElement(\n                document.elementFromPoint(e.clientX, e.clientY) as\n                | HTMLElement\n                | SVGElement,\n                datas.selectableTargets,\n            );\n            this._select(this.selectedTargets, pointTarget ? [pointTarget] : [], rect, inputEvent);\n        }\n        if (!datas.preventDragFromInside) {\n            this._selectEnd(\n                datas.startSelectedTargets,\n                datas.startPassedTargets,\n                rect,\n                e\n            );\n        }\n    };\n    private _sameCombiKey(e: any, isKeyup?: boolean) {\n        const toggleContinueSelect = [].concat(\n            this.options.toggleContinueSelect\n        );\n        const combi = getCombi(e.inputEvent, e.key);\n        const toggleKeys = isArray(toggleContinueSelect[0])\n            ? toggleContinueSelect\n            : [toggleContinueSelect];\n\n        if (isKeyup) {\n            const singleKey = e.key;\n\n            return toggleKeys.some((keys) =>\n                keys.some((key) => key === singleKey)\n            );\n        }\n        return toggleKeys.some((keys) =>\n            keys.every((key) => combi.indexOf(key) > -1)\n        );\n    }\n    private _onKeyDown = (e: any) => {\n        if (!this._sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = true;\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"keydown\", {});\n    };\n    private _onKeyUp = (e: any) => {\n        if (!this._sameCombiKey(e, true)) {\n            return;\n        }\n        this.continueSelect = false;\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"keyup\", {});\n    };\n    private _onBlur = () => {\n        if (this.toggleContinueSelect && this.continueSelect) {\n            this.continueSelect = false;\n            this.emit(\"keyup\", {});\n        }\n    };\n    private _onDocumentSelectStart = (e: any) => {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        const containers =\n            dragContainer instanceof Element\n                ? [dragContainer]\n                : ([].slice.call(dragContainer) as Element[]);\n        const target = e.target;\n\n        containers.some((container) => {\n            if (container === target || container.contains(target)) {\n                e.preventDefault();\n                return true;\n            }\n        });\n    };\n    private _findElement(clickedTarget: HTMLElement | SVGElement, selectableTargets: Array<HTMLElement | SVGElement>) {\n        let pointTarget = clickedTarget;\n\n        while (pointTarget) {\n            if (selectableTargets.indexOf(pointTarget) > -1) {\n                break;\n            }\n            pointTarget = pointTarget.parentElement;\n        }\n        return pointTarget;\n    }\n}\n\ninterface Selecto extends SelectoProperties { }\n\nexport default Selecto;\n","import Selecto, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Selecto as any)[name] = modules[name];\n}\n\nexport default Selecto;\n"],"names":["createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","document","name","setAttribute","elChildren","forEach","child","i","split","elStyle","appendChild","h","attrs","_i","_a","_b","_c","diffValue","prev","cur","func","getRect","e","ratio","boundArea","datas","distX","distY","_d","startX","startY","nextHeight","Math","sqrt","width","abs","height","left","right","top","bottom","min","getDefaultElementRect","rect","getBoundingClientRect","pos1","pos2","pos3","pos4","passTargets","beforeTargets","afterTargets","continueSelectWithoutDeselect","list","prevList","added","removed","maintained","map","index","nextIndex","injector","CLASS_NAME","PROPERTIES","OPTIONS","__spreadArrays","OPTION_TYPES","boundContainer","portalContainer","dragContainer","selectableTargets","Array","selectByClick","Boolean","selectFromInside","continueSelect","toggleContinueSelect","keyContainer","hitRate","Number","scrollOptions","Object","checkInput","preventDefault","cspNonce","String","getElementRect","Function","preventDragFromInside","rootContainer","dragCondition","clickBySelectEnd","__extends","options","_super","_this","DragScroll","clickedTarget","clientX","clientY","inputEvent","findSelectableTargets","startSelectedTargets","selectedTargets","scaleMatrix","createMatrix","containerX","Infinity","containerY","containerRect","getDistElementMatrix","boundInfo","isObject","element","boundElement","querySelector","hitRect","firstPassedTargets","pointTarget","_findElement","elementFromPoint","hasInsideTargets","length","isPreventSelect","stop","type","isTrusted","isClick","emit","startPassedTargets","_select","selectFlag","offsetPos","calculateMatrixDist","boundsArea","target","cssText","_selectEnd","dragScroll","dragStart","preventDrag","drag","_checkSelected","isDouble","isDrag","isSelect","dragEnd","_sameCombiKey","gesto","isFlag","window","documentElement","containers","Element","slice","call","some","contains","body","undefined","initElement","initDragScroll","setKeyController","this","setKeyEvent","value","triggerDragStart","off","keycon","destroy","unset","injectResult","removeEvent","_onDocumentSelectStart","info","points","selectableElements","push","querySelectorAll","checkScroll","getCurrentEvent","getEventDatas","getSelectableElements","selectablePoints","getElementPoints","touch","touches","changedTouches","dragEvent","_onDragStart","_onDragEnd","KeyController","keydown","_onKeyDown","keyup","_onKeyUp","on","_onBlur","parentNode","Gesto","checkWindowBlur","_onDrag","addEvent","inject","nonce","selectRect","targets","rectPoints","filter","_","inArea","isInside","overlapPoints","getOverlapPoints","overlapSize","getAreaSize","targetSize","hitRateValue","splitUnit","unit","between","round","direction","offsetX","offsetY","pos","scrollBy","prevSelectedTargets","isStart","selected","afterAdded","afterRemoved","afterPrevList","afterList","isDragStart","offsetSize","passedTargets","hitTest","isKeyup","concat","combi","getCombi","key","toggleKeys","isArray","singleKey_1","keys","every","indexOf","parentElement","Selecto","prototype","property","enumerable","configurable","get","setter","set","defineProperty","EventEmitter","modules"],"mappings":"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"}