{"version":3,"file":"selecto.esm.js","sources":["../src/utils.ts","../src/consts.ts","../src/SelectoManager.tsx","../src/Selecto.tsx"],"sourcesContent":["import { Hypertext, Rect } from \"./types\";\nimport { IObject, addClass, hasClass, calculateBoundSize } from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0] || e.changedTouches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\n\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\n\nexport function getRect(\n    e: any, ratio: number,\n    boundArea = e.datas.boundArea,\n): Rect {\n    let {\n        distX = 0,\n        distY = 0,\n    } = e;\n    const { startX, startY } = e.datas;\n\n    if (ratio > 0) {\n        const nextHeight = Math.sqrt((distX * distX + distY * distY) / (1 + ratio * ratio));\n        const nextWidth = ratio * nextHeight;\n\n        distX = (distX >= 0 ? 1 : -1) * nextWidth;\n        distY = (distY >= 0 ? 1 : -1) * nextHeight;\n    }\n    let width = Math.abs(distX);\n    let height = Math.abs(distY);\n\n    const maxWidth = distX < 0 ? startX - boundArea.left : boundArea.right - startX;\n    const maxHeight = distY < 0 ? startY - boundArea.top : boundArea.bottom - startY;\n\n    [width, height] = calculateBoundSize([width, height], [0, 0], [maxWidth, maxHeight], !!ratio);\n    distX = (distX >= 0 ? 1 : -1) * width;\n    distY = (distY >= 0 ? 1 : -1) * height;\n\n    const tx = Math.min(0, distX);\n    const ty = Math.min(0, distY);\n    const left = startX + tx;\n    const top = startY + ty;\n\n    return {\n        left,\n        top,\n        right: left + width,\n        bottom: top + height,\n        width,\n        height,\n    };\n}\n\nexport function getDefaultElementRect(el: HTMLElement | SVGElement) {\n    const rect = el.getBoundingClientRect();\n    const { left, top, width, height } = rect;\n\n    return {\n        pos1: [left, top],\n        pos2: [left + width, top],\n        pos3: [left, top + height],\n        pos4: [left + width, top + height],\n    };\n}\n\nexport function passTargets(\n    beforeTargets: Array<HTMLElement | SVGElement>,\n    afterTargets: Array<HTMLElement | SVGElement>,\n    continueSelectWithoutDeselect: boolean,\n) {\n    const {\n        list,\n        prevList,\n        added,\n        removed,\n        maintained,\n    } = diff(beforeTargets, afterTargets);\n\n    return [\n        ...added.map(index => list[index]),\n        ...removed.map(index => prevList[index]),\n        ...continueSelectWithoutDeselect ? maintained.map(([, nextIndex]) => list[nextIndex]) : [],\n    ];\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    pointer-events: none;\n    will-change: transform;\n    z-index: 100;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\nexport const PROPERTIES = [\n    \"boundContainer\",\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"toggleContinueSelect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n    \"checkInput\",\n    \"preventDefault\",\n    \"ratio\",\n    \"getElementRect\",\n    \"preventDragFromInside\",\n    \"rootContainer\",\n    \"dragCondition\",\n    \"clickBySelectEnd\",\n] as const;\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    \"cspNonce\",\n    \"continueSelectWithoutDeselect\",\n    ...PROPERTIES,\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    boundContainer: null,\n    portalContainer: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n    checkInput: Boolean,\n    preventDefault: Boolean,\n    cspNonce: String,\n    ratio: Number,\n    getElementRect: Function,\n    preventDragFromInside: Boolean,\n    rootContainer: Object,\n    dragCondition: Function,\n    clickBySelectEnd: Boolean,\n    continueSelectWithoutDeselect: Boolean,\n};\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"drag\",\n    \"dragEnd\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"clickTarget\",\n    \"getSelectableElements\",\n    \"setSelectedTargets\",\n    \"getElementPoints\",\n    \"getSelectedTargets\",\n    \"findSelectableTargets\",\n    \"triggerDragStart\",\n    \"checkScroll\",\n] as const;\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto, { OnDrag, OnDragStart } from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport {\n    isObject,\n    camelize,\n    IObject,\n    addEvent,\n    removeEvent,\n    isArray,\n    isString,\n    between,\n    splitUnit,\n} from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport DragScroll from \"@scena/dragscroll\";\nimport KeyController, { getCombi } from \"keycon\";\nimport {\n    getAreaSize,\n    getOverlapPoints,\n    isInside,\n    fitPoints,\n} from \"overlap-area\";\nimport { getDistElementMatrix, calculateMatrixDist, createMatrix } from \"css-to-mat\";\nimport {\n    createElement,\n    h,\n    getClient,\n    diffValue,\n    getRect,\n    getDefaultElementRect,\n    passTargets,\n} from \"./utils\";\nimport {\n    SelectoOptions,\n    SelectoProperties,\n    OnDragEvent,\n    SelectoEvents,\n    Rect,\n    BoundContainer,\n} from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends EventEmitter\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function set(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function set(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends EventEmitter<SelectoEvents> {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window | Element[];\n    private container!: HTMLElement;\n    private gesto!: Gesto;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private dragScroll: DragScroll = new DragScroll();\n    private keycon!: KeyController;\n    /**\n     *\n     */\n    constructor(options: Partial<SelectoOptions> = {}) {\n        super();\n        this.target = options.portalContainer;\n        this.container = options.container || document.body;\n        this.options = {\n            portalContainer: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            clickBySelectEnd: false,\n            hitRate: 100,\n            continueSelect: false,\n            continueSelectWithoutDeselect: false,\n            toggleContinueSelect: null,\n            keyContainer: null,\n            scrollOptions: undefined,\n            checkInput: false,\n            preventDefault: false,\n            boundContainer: false,\n            preventDragFromInside: true,\n            dragCondition: null,\n            rootContainer: null,\n            getElementRect: getDefaultElementRect,\n            cspNonce: \"\",\n            ratio: 0,\n            ...options,\n        };\n        this.initElement();\n        this.initDragScroll();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     *\n     */\n    public setSelectedTargets(\n        selectedTargets: Array<HTMLElement | SVGElement>\n    ): this {\n        this.selectedTargets = selectedTargets;\n\n        return this;\n    }\n    /**\n     * You can get the currently selected targets.\n     */\n    public getSelectedTargets(): Array<HTMLElement | SVGElement> {\n        return this.selectedTargets;\n    }\n    public setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    public setToggleContinueSelect(\n        toggleContinueSelect: string[][] | string[] | string\n    ) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n    public setPreventDefault(value: boolean) {\n        this.gesto.options.preventDefault = value;\n    }\n    public setCheckInput(value: boolean) {\n        this.gesto.options.checkInput = value;\n    }\n    /**\n     * `OnDragStart` is triggered by an external event.\n     * @param - external event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto();\n     *\n     * window.addEventListener(\"mousedown\", e => {\n     *   selecto.triggerDragStart(e);\n     * });\n     */\n    public triggerDragStart(e: MouseEvent | TouchEvent) {\n        this.gesto.triggerDragStart(e);\n        return this;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.gesto.unset();\n        this.injectResult.destroy();\n        removeEvent(document, \"selectstart\", this._onDocumentSelectStart);\n\n        this.keycon = null;\n        this.gesto = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n    public getElementPoints(target: HTMLElement | SVGElement) {\n        const getElementRect = this.getElementRect || getDefaultElementRect;\n        const info = getElementRect(target);\n        const points = [info.pos1, info.pos2, info.pos4, info.pos3];\n\n        if (getElementRect !== getDefaultElementRect) {\n            const rect = target.getBoundingClientRect();\n\n            return fitPoints(points, rect);\n        }\n        return points;\n    }\n    /**\n     * Get all elements set in `selectableTargets`.\n     */\n    public getSelectableElements() {\n        const selectableElements: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach((target) => {\n            if (isObject(target)) {\n                selectableElements.push(target);\n            } else {\n                const elements = [].slice.call(\n                    document.querySelectorAll(target)\n                );\n\n                elements.forEach((el) => {\n                    selectableElements.push(el);\n                });\n            }\n        });\n\n        return selectableElements;\n    }\n    /**\n     * If scroll occurs during dragging, you can manually call this method to check the position again.\n     */\n    public checkScroll() {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        const scrollOptions = this.scrollOptions;\n\n        // If it is a scrolling position, pass drag\n        scrollOptions?.container && this.dragScroll.checkScroll({\n            inputEvent: this.gesto.getCurrentEvent(),\n            ...scrollOptions,\n        });\n    }\n    /**\n     * Find for selectableTargets again during drag event\n     */\n    public findSelectableTargets(datas: any = this.gesto.getEventDatas()) {\n        const selectableTargets = this.getSelectableElements();\n        const selectablePoints = selectableTargets.map((target) =>\n            this.getElementPoints(target)\n        );\n        datas.selectableTargets = selectableTargets;\n        datas.selectablePoints = selectablePoints;\n    }\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    public clickTarget(\n        e: MouseEvent | TouchEvent,\n        clickedTarget?: Element\n    ): this {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent = {\n            datas: {\n                selectFlag: false,\n            },\n            clientX,\n            clientY,\n            inputEvent: e,\n            isClick: true,\n            stop: () => {\n                return false;\n            },\n        } as any;\n        if (this._onDragStart(dragEvent, clickedTarget)) {\n            this._onDragEnd(dragEvent);\n        }\n        return this;\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon\n                .keydown(this._onKeyDown)\n                .keyup(this._onKeyUp)\n                .on(\"blur\", this._onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect } = this.options;\n        if (!toggleContinueSelect || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    private initElement() {\n        this.target = createElement(\n            (<div className={CLASS_NAME}></div>) as any,\n            this.target,\n            this.container\n        );\n\n        const target = this.target;\n\n        const { dragContainer, checkInput, preventDefault } = this.options;\n        this.dragContainer =\n            typeof dragContainer === \"string\"\n                ? [].slice.call(document.querySelectorAll(dragContainer))\n                : dragContainer || (this.target.parentNode as any);\n        this.gesto = new Gesto(this.dragContainer, {\n            checkWindowBlur: true,\n            container: window,\n            checkInput,\n            preventDefault,\n        }).on({\n            dragStart: this._onDragStart,\n            drag: this._onDrag,\n            dragEnd: this._onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this._onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target, {\n            nonce: this.options.cspNonce,\n        });\n    }\n    private hitTest(\n        selectRect: Rect,\n        clientX: number,\n        clientY: number,\n        targets: Array<HTMLElement | SVGElement>,\n        selectablePoints: number[][][]\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n        const rectPoints = [\n            [left, top],\n            [right, top],\n            [right, bottom],\n            [left, bottom],\n        ];\n        return targets.filter((_, i) => {\n            const points = selectablePoints[i];\n            const inArea = isInside([clientX, clientY], points);\n\n            if (selectByClick && inArea) {\n                return true;\n            }\n            const overlapPoints = getOverlapPoints(rectPoints, points);\n\n            if (!overlapPoints.length) {\n                return false;\n            }\n            const overlapSize = getAreaSize(overlapPoints);\n            const targetSize = getAreaSize(points);\n\n            const hitRateValue = splitUnit(`${hitRate}`);\n\n            if (hitRateValue.unit === \"px\") {\n                return overlapSize >= hitRateValue.value;\n            } else {\n                const rate = between(\n                    Math.round((overlapSize / targetSize) * 100),\n                    0,\n                    100\n                );\n\n                return rate >= Math.min(100, hitRateValue.value);\n            }\n        });\n    }\n    private initDragScroll() {\n        this.dragScroll\n            .on(\"scroll\", ({ container, direction }) => {\n                this.emit(\"scroll\", {\n                    container,\n                    direction,\n                });\n            })\n            .on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n                const gesto = this.gesto;\n\n                if (!gesto || !gesto.isFlag()) {\n                    return;\n                }\n\n                const datas = this.gesto.getEventDatas();\n                const boundArea = datas.boundArea;\n\n                datas.startX -= offsetX;\n                datas.startY -= offsetY;\n                datas.selectablePoints.forEach((points: number[][]) => {\n                    points.forEach((pos) => {\n                        pos[0] -= offsetX;\n                        pos[1] -= offsetY;\n                    });\n                });\n\n                boundArea.left -= offsetX;\n                boundArea.right -= offsetX;\n                boundArea.top -= offsetY;\n                boundArea.bottom -= offsetY;\n\n                this.gesto.scrollBy(\n                    offsetX,\n                    offsetY,\n                    inputEvent.inputEvent,\n                    false\n                );\n                this._checkSelected(this.gesto.getCurrentEvent());\n            });\n    }\n    private _select(\n        prevSelectedTargets: Array<HTMLElement | SVGElement>,\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        inputEvent: any,\n        isStart?: boolean\n    ) {\n        const { added, removed, prevList, list } = diff(\n            prevSelectedTargets,\n            selectedTargets\n        );\n\n        this.selectedTargets = selectedTargets;\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.emit(\"selectStart\", {\n                selected: selectedTargets,\n                added: added.map((index) => list[index]),\n                removed: removed.map((index) => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n        if (added.length || removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.emit(\"select\", {\n                selected: selectedTargets,\n                added: added.map((index) => list[index]),\n                removed: removed.map((index) => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n    }\n    private _selectEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        startPassedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        e: OnDragEvent\n    ) {\n        const { inputEvent, isDouble } = e;\n        const { added, removed, prevList, list } = diff(\n            startSelectedTargets,\n            this.selectedTargets\n        );\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(startPassedTargets, this.selectedTargets);\n        const type = inputEvent && inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"selectEnd\", {\n            selected: this.selectedTargets,\n            added: added.map((index) => list[index]),\n            removed: removed.map((index) => prevList[index]),\n            afterAdded: afterAdded.map((index) => afterList[index]),\n            afterRemoved: afterRemoved.map((index) => afterPrevList[index]),\n            isDragStart,\n            isClick: !!e.isClick,\n            isDouble: !!isDouble,\n            rect,\n            inputEvent,\n        });\n    }\n    private _onDragStart = (e: OnDragStart, clickedTarget?: Element) => {\n        const { datas, clientX, clientY, inputEvent } = e;\n        const {\n            continueSelect,\n            continueSelectWithoutDeselect,\n            selectFromInside,\n            selectByClick,\n            rootContainer,\n            boundContainer,\n            preventDragFromInside = true,\n            clickBySelectEnd,\n            dragCondition,\n        } = this.options;\n\n        if (dragCondition && !dragCondition(e)) {\n            e.stop();\n            return;\n        }\n        this.findSelectableTargets(datas);\n        datas.startSelectedTargets = this.selectedTargets;\n        datas.scaleMatrix = createMatrix();\n        datas.containerX = 0;\n        datas.containerY = 0;\n\n        let boundArea = {\n            left: -Infinity,\n            top: -Infinity,\n            right: Infinity,\n            bottom: Infinity,\n        };\n        if (rootContainer) {\n            const containerRect = this.container.getBoundingClientRect();\n\n            datas.containerX = containerRect.left;\n            datas.containerY = containerRect.top;\n            datas.scaleMatrix = getDistElementMatrix(this.container, rootContainer);\n        }\n\n        if (boundContainer) {\n            const boundInfo: Required<BoundContainer> =\n                isObject(boundContainer) && \"element\" in boundContainer\n                    ? {\n                        left: true,\n                        top: true,\n                        bottom: true,\n                        right: true,\n                        ...boundContainer,\n                    }\n                    : {\n                        element: boundContainer,\n                        left: true,\n                        top: true,\n                        bottom: true,\n                        right: true,\n                    };\n            const boundElement = boundInfo.element;\n            let rectElement: HTMLElement;\n\n            if (boundElement) {\n                if (isString(boundElement)) {\n                    rectElement = document.querySelector(boundElement);\n                } else if (boundElement === true) {\n                    rectElement = this.container;\n                } else {\n                    rectElement = boundElement;\n                }\n                const rect = rectElement.getBoundingClientRect();\n\n                if (boundInfo.left) {\n                    boundArea.left = rect.left;\n                }\n                if (boundInfo.top) {\n                    boundArea.top = rect.top;\n                }\n                if (boundInfo.right) {\n                    boundArea.right = rect.right;\n                }\n                if (boundInfo.bottom) {\n                    boundArea.bottom = rect.bottom;\n                }\n            }\n        }\n\n        datas.boundArea = boundArea;\n\n        const hitRect = {\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n            width: 0,\n            height: 0,\n        };\n        let firstPassedTargets: Array<HTMLElement | SVGElement> = [];\n\n        if (!selectFromInside || (selectByClick && !clickBySelectEnd)) {\n            const pointTarget = this._findElement(\n                (clickedTarget ||\n                document.elementFromPoint(clientX, clientY)) as\n                | HTMLElement\n                | SVGElement,\n                datas.selectableTargets,\n            );\n            firstPassedTargets = pointTarget ? [pointTarget] : [];\n        }\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        const isPreventSelect = !selectFromInside && hasInsideTargets;\n\n        // prevent drag from inside when selectByClick is false\n        if (isPreventSelect && !selectByClick) {\n            e.stop();\n            return false;\n        }\n\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts (triggers on mousedown or touchstart), the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result =\n            !(e as any).isClick && isTrusted\n                ? this.emit(\"dragStart\", { ...e })\n                : true;\n\n        if (!result) {\n            e.stop();\n            return false;\n        }\n\n        if (continueSelect) {\n            firstPassedTargets = passTargets(\n                this.selectedTargets,\n                firstPassedTargets,\n                continueSelectWithoutDeselect,\n            );\n            datas.startPassedTargets = this.selectedTargets;\n        } else {\n            datas.startPassedTargets = [];\n        }\n        this._select(\n            this.selectedTargets,\n            firstPassedTargets,\n            hitRect,\n            inputEvent,\n            true\n        );\n        datas.startX = clientX;\n        datas.startY = clientY;\n        datas.selectFlag = false;\n        datas.preventDragFromInside = false;\n\n        const offsetPos = calculateMatrixDist(datas.scaleMatrix, [\n            clientX - datas.containerX,\n            clientY - datas.containerY,\n        ]);\n        datas.boundsArea = this.target.style.cssText += `position: ${rootContainer ? \"absolute\" : \"fixed\"};`\n            + `left:0px;top:0px;`\n            + `transform: translate(${offsetPos[0]}px, ${offsetPos[1]}px)`;\n\n        if (isPreventSelect && selectByClick && !clickBySelectEnd) {\n            inputEvent.preventDefault();\n\n            // prevent drag from inside when selectByClick is true and force call `selectEnd`\n            if (preventDragFromInside) {\n                this._selectEnd(\n                    datas.startSelectedTargets,\n                    datas.startPassedTargets,\n                    hitRect,\n                    e\n                );\n                datas.preventDragFromInside = true;\n            }\n        } else {\n            datas.selectFlag = true;\n            if (type === \"touchstart\") {\n                inputEvent.preventDefault();\n            }\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                this.dragScroll.dragStart(e, scrollOptions);\n            }\n            if (clickBySelectEnd) {\n                datas.selectFlag = false;\n                e.preventDrag();\n            }\n        }\n        return true;\n    };\n    private _checkSelected(e: any, rect = getRect(e, this.options.ratio)) {\n        const { datas, inputEvent } = e;\n        const { top, left, width, height } = rect;\n        const selectFlag = datas.selectFlag;\n        const options = this.options;\n        const {\n            containerX,\n            containerY,\n            scaleMatrix,\n        } = datas;\n        const offsetPos = calculateMatrixDist(scaleMatrix, [\n            left - containerX,\n            top - containerY,\n        ]);\n        const offsetSize = calculateMatrixDist(scaleMatrix, [\n            width,\n            height,\n        ]);\n        let prevSelectedTargets: Array<HTMLElement | SVGElement> = [];\n        let selectedTargets: Array<HTMLElement | SVGElement> = [];\n        if (selectFlag) {\n            this.target.style.cssText +=\n                `display: block;` +\n                `left:0px;top:0px;` +\n                `transform: translate(${offsetPos[0]}px, ${offsetPos[1]}px);` +\n                `width:${offsetSize[0]}px;height:${offsetSize[1]}px;`;\n\n            const passedTargets = this.hitTest(\n                rect,\n                datas.startX,\n                datas.startY,\n                datas.selectableTargets,\n                datas.selectablePoints\n            );\n            prevSelectedTargets = this.selectedTargets;\n            selectedTargets = passTargets(\n                datas.startPassedTargets,\n                passedTargets,\n                options.continueSelect && options.continueSelectWithoutDeselect,\n            );\n\n            this.selectedTargets = selectedTargets;\n        }\n        /**\n         * When the drag, the drag event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event drag\n         * @param {OnDrag} - Parameters for the drag event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"drag\", e => {\n         *   e.stop();\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result = this.emit(\"drag\", {\n            ...e,\n            isSelect: selectFlag,\n            rect,\n        });\n        if (result === false) {\n            this.target.style.cssText += \"display: none;\";\n            e.stop();\n            return;\n        }\n\n        if (selectFlag) {\n            this._select(prevSelectedTargets, selectedTargets, rect, inputEvent);\n        }\n    }\n    private _onDrag = (e: OnDrag) => {\n        if (e.datas.selectFlag) {\n            const scrollOptions = this.scrollOptions;\n\n            // If it is a scrolling position, pass drag\n            if (scrollOptions?.container && this.dragScroll.drag(e, scrollOptions)) {\n                return;\n            }\n        }\n        this._checkSelected(e);\n    };\n    private _onDragEnd = (e: OnDragEvent) => {\n        const { datas, inputEvent } = e;\n        const rect = getRect(e, this.options.ratio);\n        const selectFlag = datas.selectFlag;\n\n        /**\n         * When the drag ends (triggers on mouseup or touchend after drag), the dragEnd event is called.\n         * @memberof Selecto\n         * @event dragEnd\n         * @param {OnDragEnd} - Parameters for the dragEnd event\n         */\n        if (inputEvent && !e.isClick) {\n            this.emit(\"dragEnd\", {\n                isDouble: !!e.isDouble,\n                isDrag: false,\n                isSelect: selectFlag,\n                ...e,\n                isClick: !!e.isClick,\n                rect,\n            });\n        }\n        this.target.style.cssText += \"display: none;\";\n        if (selectFlag) {\n            datas.selectFlag = false;\n            this.dragScroll.dragEnd();\n        } else if (this.selectByClick && this.clickBySelectEnd) {\n            // only clickBySelectEnd\n            const pointTarget = this._findElement(\n                document.elementFromPoint(e.clientX, e.clientY) as\n                | HTMLElement\n                | SVGElement,\n                datas.selectableTargets,\n            );\n            this._select(this.selectedTargets, pointTarget ? [pointTarget] : [], rect, inputEvent);\n        }\n        if (!datas.preventDragFromInside) {\n            this._selectEnd(\n                datas.startSelectedTargets,\n                datas.startPassedTargets,\n                rect,\n                e\n            );\n        }\n    };\n    private _sameCombiKey(e: any, isKeyup?: boolean) {\n        const toggleContinueSelect = [].concat(\n            this.options.toggleContinueSelect\n        );\n        const combi = getCombi(e.inputEvent, e.key);\n        const toggleKeys = isArray(toggleContinueSelect[0])\n            ? toggleContinueSelect\n            : [toggleContinueSelect];\n\n        if (isKeyup) {\n            const singleKey = e.key;\n\n            return toggleKeys.some((keys) =>\n                keys.some((key) => key === singleKey)\n            );\n        }\n        return toggleKeys.some((keys) =>\n            keys.every((key) => combi.indexOf(key) > -1)\n        );\n    }\n    private _onKeyDown = (e: any) => {\n        if (!this._sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = true;\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"keydown\", {});\n    };\n    private _onKeyUp = (e: any) => {\n        if (!this._sameCombiKey(e, true)) {\n            return;\n        }\n        this.continueSelect = false;\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"keyup\", {});\n    };\n    private _onBlur = () => {\n        if (this.toggleContinueSelect && this.continueSelect) {\n            this.continueSelect = false;\n            this.emit(\"keyup\", {});\n        }\n    };\n    private _onDocumentSelectStart = (e: any) => {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        const containers =\n            dragContainer instanceof Element\n                ? [dragContainer]\n                : ([].slice.call(dragContainer) as Element[]);\n        const target = e.target;\n\n        containers.some((container) => {\n            if (container === target || container.contains(target)) {\n                e.preventDefault();\n                return true;\n            }\n        });\n    };\n    private _findElement(clickedTarget: HTMLElement | SVGElement, selectableTargets: Array<HTMLElement | SVGElement>) {\n        let pointTarget = clickedTarget;\n\n        while (pointTarget) {\n            if (selectableTargets.indexOf(pointTarget) > -1) {\n                break;\n            }\n            pointTarget = pointTarget.parentElement;\n        }\n        return pointTarget;\n    }\n}\n\ninterface Selecto extends SelectoProperties { }\n\nexport default Selecto;\n","import SelectoManager from \"./SelectoManager\";\n\nclass Selecto extends SelectoManager {\n\n}\nexport default Selecto;\n"],"names":["getClient","e","touch","touches","changedTouches","clientX","clientY","createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","document","name","setAttribute","elChildren","forEach","child","i","split","hasClass","addClass","elStyle","appendChild","h","attrs","_i","_a","_b","_c","diffValue","prev","cur","func","getRect","ratio","boundArea","datas","distX","distY","_d","startX","startY","nextHeight","Math","sqrt","nextWidth","width","abs","height","maxWidth","left","right","maxHeight","top","bottom","tx","min","ty","getDefaultElementRect","rect","getBoundingClientRect","pos1","pos2","pos3","pos4","passTargets","beforeTargets","afterTargets","continueSelectWithoutDeselect","list","prevList","added","removed","maintained","map","index","nextIndex","injector","styled","CLASS_NAME","PROPERTIES","OPTIONS","__spreadArrays","OPTION_TYPES","boundContainer","portalContainer","dragContainer","selectableTargets","Array","selectByClick","Boolean","selectFromInside","continueSelect","toggleContinueSelect","keyContainer","hitRate","Number","scrollOptions","Object","checkInput","preventDefault","cspNonce","String","getElementRect","Function","preventDragFromInside","rootContainer","dragCondition","clickBySelectEnd","EVENTS","METHODS","__extends","options","_super","_this","DragScroll","clickedTarget","inputEvent","stop","findSelectableTargets","startSelectedTargets","selectedTargets","scaleMatrix","createMatrix","containerX","containerY","Infinity","containerRect","getDistElementMatrix","boundInfo","isObject","element","boundElement","rectElement","isString","querySelector","hitRect","firstPassedTargets","pointTarget","_findElement","elementFromPoint","hasInsideTargets","length","isPreventSelect","type","isTrusted","result","isClick","emit","startPassedTargets","_select","selectFlag","offsetPos","calculateMatrixDist","boundsArea","target","cssText","_selectEnd","dragScroll","dragStart","preventDrag","drag","_checkSelected","isDouble","isDrag","isSelect","dragEnd","_sameCombiKey","gesto","isFlag","window","documentElement","containers","Element","slice","call","some","contains","body","undefined","initElement","initDragScroll","setKeyController","setKeyEvent","value","triggerDragStart","off","keycon","destroy","unset","injectResult","removeEvent","_onDocumentSelectStart","info","points","fitPoints","selectableElements","push","elements","querySelectorAll","checkScroll","getCurrentEvent","getEventDatas","getSelectableElements","selectablePoints","getElementPoints","dragEvent","_onDragStart","_onDragEnd","KeyController","keydown","_onKeyDown","keyup","_onKeyUp","on","_onBlur","parentNode","Gesto","checkWindowBlur","_onDrag","addEvent","inject","nonce","selectRect","targets","rectPoints","filter","_","inArea","isInside","overlapPoints","getOverlapPoints","overlapSize","getAreaSize","targetSize","hitRateValue","splitUnit","unit","rate","between","round","direction","offsetX","offsetY","pos","scrollBy","prevSelectedTargets","isStart","selected","afterAdded","afterRemoved","afterPrevList","afterList","isDragStart","offsetSize","passedTargets","hitTest","isKeyup","concat","combi","getCombi","key","toggleKeys","isArray","singleKey_1","keys","every","indexOf","parentElement","Selecto","Properties","prototype","property","enumerable","configurable","get","setter","camelize","set","defineProperty","EventEmitter","SelectoManager"],"mappings":"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"}